[0359] Another issue with app sandboxing that occurs on mobile platforms is that it is problematic to have a single repository of documents that are available to all managed applications on the mobile device and potentially synced offline to cloud based storage. Mobile applications work around the sandbox limits in various ways, all of which have drawbacks. Often, they will exchange files of certain fixed types with other applications that have registered to accept certain those same types. The drawback here is that one ends up with multiple copies of a particular file in each app's sandbox. If one or more apps wish to edit the file content, keeping track of which app has latest versions is problematic for users.
[0360] One can overcome the issue highlighted above if users are trained to always send their modified documents back to a common sync agent application which might also be charged with syncing documents to/from cloud based storage. Cloud-based file sharing service mobile applications are an example of an application that permits this sort of data exchange with cloud-based sync. The drawback here is that these extra steps are easy to forget. Also, they are not required when using equivalent desktop applications that operate on the notion of shared documents folders for all applications. These two facts can lead to data file consistency issues and poor user experience if users are not properly trained.
[0361] Another approach to this problem is to save the files that one wishes to share into shared storage on those mobile platforms that support this concept. This has the downside that shared storage is world readable and therefore shared with all applications. Once information is placed into shared storage, containment of the information is lost since any application on mobile device can read it. Also the data can trivially be accessed by anyone who gains physical access to the device using standard file viewers and development tools.
[0362] The challenges of information containment and sharing of documents between trusted applications that are highlighted above are overcome by introducing the concept of an encrypted file vault. An encrypted file vault is a logical container into which all persistent data read/written by a mobile application (which would otherwise end up in a writeable file in the app sandbox) will be redirected. The contents of the vault are themselves written into file(s) held inside an app sandbox. But the contents of all files and the file metadata itself (name, size, access times, etc.) are all encrypted.
[0363] Strong encryption algorithms (e.g. FIPS 140-2 certified) are used to protect all information placed into the vault with keys that are managed by the enterprise rather than the users themselves. Keys would typically be assigned based on a tuple of user, device, and application or app group. That implies that distinct key sets are used each unique combination of user, device, and application/app group. The keys are maintained off device in an enterprise key management server. The keys may be downloaded temporarily to the mobile device to enable data access, but only after strongly authenticating the user, device, and application in question.