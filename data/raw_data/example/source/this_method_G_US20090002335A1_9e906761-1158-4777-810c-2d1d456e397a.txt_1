[0314]According to one embodiment, when a media player is first connected to a host computer (or even more generally when matching identifiers are not present), the user of the media player is queried as to whether the user desires to affiliate, assign or lock the media player to the host computer. When the user of the media player elects to affiliate, assign or lock the media player with the host computer, then a pseudo-random identifier is obtained and stored in either the media database or a file within both the host computer and the media player. In one implementation, the identifier is an identifier associated with (e.g., known or generated by) the host computer or its management module and such identifier is sent to and stored in the media player. In another implementation, the identifier is associated with (e.g., known or generated by) the media player and is sent to and stored in a file or media database of the host computer.
[0315]Image based browsers with image functionality typically require several different image formats to support the various display modes of the browser. For example, the browser may require a full image for the primary position as well as various thumbnail images for the secondary positions, which may help a user browse through a group of images. This may include partial versions, skewed versions, versions that included reflection, and the like.
[0316]One method for creating the various images of the image browser window is to download the original image to the portable media device and then to transcode the original image into the required formats on the portable media device when they need to be displayed. This is sometimes referred to as processing data on-the-fly. While this may work, it is generally believed that this methodology has several drawbacks that make it less appealing to the user. For example, because formatting images is a process intensive task (especially on portable media devices that lack the horsepower of their larger hosts), portable media devices tend to operate slowly and consume more power. Hence, formatting images on portable media devices can result in an unsatisfactory user experience. For one, the user has to wait while the image is being formatted. For another, the battery of the portable media device tends to run out more regularly.
[0317]In order to reduce or overcome these drawbacks, images can be preformatted on the host before or during the download thereto. When an image is identified for download various preformatted images derived from the original image (and possibly the original images) are sent to the portable media device. The processing is performed on the host, which can handle these tasks more easily than the portable media player. The tasks may, for example, include scaling, cropping, rotation, color correction, skewing, reflection, and the like. Once received by the portable media device, the preformatted images are stored for later use. By storing these images, the media device is relieved from having to perform any of the labor intensive tasks associated with image formatting. That is, the preformatted images relieve the media device of much of the work required to display them. As a result, the device operates faster and without repeated needs for recharging. In one embodiment, at least some of the preformatted images are thumbnail images.
[0318]During media device use, the image based browser may request that an image to be displayed. Instead of processing the original image as in the method described above, the device simply obtains the appropriate preformatted image from media database and presents it to the user on a display. The preformatted images may include a full image for the primary position and several different thumbnail sized images for the secondary positions. However, in some cases, the media device can still be used to perform some processing when image are to be presented (e.g., transitions, animations, skew, reflections, etc.).