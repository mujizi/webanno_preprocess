Note that the scheduling decision occurs every Time Transmission Interval (TTI) according to the assumed packet scheduler model. Thus, at each TTI, the current supportable data rate (R.sub.i(t)) of every user i is known and the average throughput S.sub.i(t) (and hence the relative fairness .alpha..sub.i(t)) may be calculated by using any throughput averaging method. Therefore, a solution of Equation 2 may found by computing the aggregate utility of the system if user i is scheduled (Equation 1) .A-inverted.i and then finding the user with the highest aggregate utility. In other words, a solution of Equation 2 may be found by choosing user i for transmission such that:
user i = arg max i [ ( R i ( t ) ) c ( 1 - .gamma. i - ln ( .alpha. i ( t ) ) ) d + j = 1 , j .noteq. i n ( R j ( t ) ) c ( 1 - .gamma. j - ln ( .alpha. j ( t ) ) ) d ] ( 3 )
where user i is selected for transmission and all other users j, j.noteq.i, are not selected for transmission. (For simplicity, it is assumed that only one user is scheduled for transmission at each TTI. However, the UOC-PS scheme will work the same way if more than one user is scheduled.) If user i is selected for transmission then .alpha..sub.i(t) will increase and .alpha..sub.i(t) .A-inverted.j.noteq.i will decrease as other users are not served. A detailed description of this process is illustrated in FIG. 2.
[0062]Two important factors affect the scheduling decision (i.e., the choice of user i). The first factor is the user's current supportable data rate (i.e., R.sub.i(t)), which depends on the channel condition. The user with higher current supportable data rate has a higher chance of maximizing the aggregate utility of the system. The second factor is the user's relative fairness (i.e., .alpha..sub.i(t)). In the utility function, X.sub.i2(t) is a function of .alpha..sub.i(t) and .gamma..sub.i. X.sub.i2(t) is designed such that it increases at a much faster rate if a user with a relatively low average throughput (e.g. .alpha..sub.i(t) close to 0) is served, rather than a user with a relatively high average throughput (e.g., .alpha..sub.i(t) close to 1). .gamma..sub.i determines the rate of decrease in X.sub.i2(t). Larger values in .gamma..sub.i result in higher rates of decrease in X.sub.i2(t) (especially as .alpha..sub.i(t) gets close to 0) which results in more fairness in the network as described next. FIG. 3 plots X.sub.i2(t) for 0.ltoreq..alpha..ltoreq.1 for .gamma..sub.i fixed at 1.1, 1.3, 1.5, 1.7 and 1.9. As can be seen, X.sub.i2(t) decreases at a much faster rate as the user's relative fairness decreases from 1 to 0 and it approaches -.infin. as the user's relative fairness approaches 0. This ensures fairness among users since if a user with high average throughput is served, though his utility will increase, the overall utility will not be maximized due to the rapid decrease of the utilities of those with low average throughputs. Therefore, the scheduler will be forced to serve those with low average throughputs, since if served, their utility function will sharply increase which results in a maximization of the network's utility even though those users may not have the best channel conditions. As FIG. 3 shows, the larger the value of .gamma..sub.i, the higher rate of decrease in X.sub.i2(t) (the rate of decrease in X.sub.i2(t) increases as .alpha..sub.i(t) moves away from 1 towards 0) which allows the system to be more fair to users with low .alpha. values (i.e., low average throughputs compared to users with highest value). The service provider can choose different fixed values of .gamma..sub.i for different users depending on their traffic class, history, etc. Also, the values of .gamma..sub.i can be dynamically changed as needed by the service provider and according to the network statues. For example, the service provider may set .gamma..sub.i to a large value (i.e., more fairness) when the network is congested to ensure fairness among users, and set it to lower values (i.e., less fairness) when the network is under utilized. It will of course be appreciated that the above example may be adapted for multiple users.
Best-Effort Traffic