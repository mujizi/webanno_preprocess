[0018] Depending on the configuration of the equipment and the location of the resource in question, a system that embodies the invention can include a single computer (including both provider process 220 and user process 135), in which case network 205 can be omitted. Or a system embodying the invention can include multiple machines, connected in some manner, with resources and processes distributed among the machine. A person skilled in the art will recognize other possible configurations.
[0019] FIG. 3 shows the interface to provider processes for requests by the user process of FIG. 1, according to an embodiment of the invention. In FIG. 3, several elements are shown. Stack 305 is used to receive requests for changes from the user processes. This information is provided to interface 310, which can be a CIMOM. Interface 310 is typically a root process, and is responsible for determining which of the various provider processes is to carry out the request. Examples of provider processes are provider processes 220-1, 220-2, 220-3, and 220-4, although a person skilled in the art will recognize that there can be any number of provider processes. The provider processes are typically started as root processes, just like interface 310.
[0020] Between interface 310 and provider processes 220-1 through 220-4 lies provider interface 315. Provider interface 315 acts as a go-between for provider processes 220-1 through 220-4, in that provider interface 315 is responsible for controlling the behavior of provider processes 220-1 through 220-4. Specifically, provider interface 315 is responsible for assigning the appropriate user ID (UID) to the provider process. As shown in the blow-up of provider process 220-4, the provider process includes two UIDs: UID 320, and effective UID (eUID) 325. eUID 325 enables the provider process to run with reduced privileges. Thus, even though UID 320 might be set to the root user, eUID 325 can be set to the UID of the user process that requested the change. By setting eUID 325 to the UID of the user process, the provider process can run as if it were initiated by the user. As an aside, it is worth noting that this process does not work in reverse: that is, setting eUID 325 to a higher level of permission than UID 320 does not permit the provider process to execute with an increased level of permission. But because the provider process is typically started as a root process, this reverse situation is not usually a concern.
[0021] To be able to set eUID 325 to the UID of the user process, provider interface 315 needs to know the UID of the user process. Authentication module 330 provides this information. When the user process requests the change, authentication module challenges the user to authenticate himself. Typically, the user provides a username and password to perform the authentication, but any authentication scheme can be used. Once the user is authenticated and identified, UID determiner 335 can determine the user's UID. Provider interface 315 can then use this information to set eUID 325 to the user's UID, to appropriately limit the provider process in what changes it can make.
[0022] It can happen that, as part of carrying out a requested change, the provider process needs to communicate with interface 310. As interface 310 runs as a root process, this communication can be hindered or prevented by the fact that the provider process has an eUID providing less permission than a root process. To enable this communication, provider interface 315 can change the provider process's eUID back to the root user during the period of communication, and reset the provider process's eUID to the user's UID when communication is finished. A person skilled in the art will recognize that these changes are not limited to periods of communication between the provider process and interface 310: provider interface 315 can make this change at any time the provider process needs to run as a root process. (Of course, to change the provider process's eUID when it is trying to make the requested change would not be sensible, since it is the fact that the eUID denies the provider process root privileges that is of value in embodiments of the invention.)