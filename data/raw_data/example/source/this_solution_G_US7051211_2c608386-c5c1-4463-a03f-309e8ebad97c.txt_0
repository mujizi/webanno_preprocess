A second example of a potential attacker is a sophisticated "hacker" who can monitor a line or other connection to a data processing system and can read and intercept information flowing unprotected over a network, such as the Internet. These attackers are also, typically, skillful programmers who can analyze the software, locate data of interest to them and also write and execute programs, even the most complicated ones. The only thing that such an attacker may lack is the physical possession of a disk, if the distributed software was located on a disk when it was sold. Or, in some cases, these attackers may find it impossible to properly identify themselves to a server since the identification data may contain the serial number of a computing device they are using.
With these two types of potential attackers in mind, certain solutions to such a problem may provide adequate control but may difficult or expensive to implement. For example, one solution might be to use public key cryptography. Any of the well-known public key algorithms, such as the discrete logarithm (DL) problem in the multiplicative group of elements of a finite field, the RSA method, or a DL problem in a group of points on an appropriate elliptic curve, can be used. In a public key encryption procedure each user has two keys. One key is public and, as its name indicates, is published, so it is available to anyone. The other key is called private and is known to the user (i.e., the key owner) only. Hence, when a software company gets a request from a user, for example, over the Internet, to deliver a particular piece of software, it can, upon verifying the user's credentials, encrypt the program with the user's public key. Since, typically, only this authorized user is in possession of the private key, only the authorized user can decrypt the software and install it on his or her computer.
While the public key cryptography solution may provide software control, such a solution typically requires the existence of sophisticated public key infrastructure (PKI) and the presence of an entity called the Certification Authority (CA) which will certify each user's public key. Thus, this solution may be an expensive solution. The average person buying software on a disk or over the Internet, does not typically have a public/private key pair. The cost of protecting software would be prohibitively high and, therefore, the overall cost of the software may not be competitive. See Schneier, B., "Applied Cryptography," 2nd edition, John Wiley & Sons Inc, 1996, for a thorough description of issues related to public key cryptography: the algorithms, their strengths, performance parameters, their advantages and disadvantages.
Yet another solution would be to use a symmetric key algorithm, such as DES or the Triple DES as described in Applied Cryptography, and Menezes, A. J., van Oorschot, P. C., and Vanstone, S. A., "Handbook of Applied Cryptography," CRC Press, 1997. In this case, the encryption is performed much faster, but difficulties and expenses may arise with the distribution of these symmetric keys.
In addition to the systems described above, several patents have addressed the issue of software control. For example, U.S. Pat. No. 5,915,025 entitled "DATA PROCESSING APPARATUS WITH SOFTWARE PROTECTING FUNCTIONS," describes a data processing apparatus capable of enhancing the level of encryption security. Upon receiving target data to be encrypted, an encryption key generation unit generates an encryption key in accordance with an attribute of the target data. Using this encryption key, an encryption unit encrypts the target data. The encrypted data is placed into a storage unit. When a request is made to process the encrypted data, a decryption key generation unit generates a decryption key in accordance with the attribute of the encrypted data. The procedures for encryption and decryption may be quite complicated and rely on the use of public key encryption methods such as RSA.