#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0156] When the type of virtual memory to be obtained is determined, the size of the memory required by the OS that is loaded is obtained from the logical memory division controller 403 (step 1905).
1-1	0-1	[	_	_	
1-2	1-5	0156	_	_	
1-3	5-6	]	_	_	
1-4	7-11	When	_	_	
1-5	12-15	the	_	_	
1-6	16-20	type	_	_	
1-7	21-23	of	_	_	
1-8	24-31	virtual	_	_	
1-9	32-38	memory	_	_	
1-10	39-41	to	_	_	
1-11	42-44	be	_	_	
1-12	45-53	obtained	_	_	
1-13	54-56	is	_	_	
1-14	57-67	determined	_	_	
1-15	67-68	,	_	_	
1-16	69-72	the	_	_	
1-17	73-77	size	_	_	
1-18	78-80	of	_	_	
1-19	81-84	the	_	_	
1-20	85-91	memory	_	_	
1-21	92-100	required	_	_	
1-22	101-103	by	_	_	
1-23	104-107	the	_	_	
1-24	108-110	OS	_	_	
1-25	111-115	that	_	_	
1-26	116-118	is	_	_	
1-27	119-125	loaded	_	_	
1-28	126-128	is	_	_	
1-29	129-137	obtained	_	_	
1-30	138-142	from	_	_	
1-31	143-146	the	_	_	
1-32	147-154	logical	_	_	
1-33	155-161	memory	_	_	
1-34	162-170	division	_	_	
1-35	171-181	controller	_	_	
1-36	182-185	403	_	_	
1-37	186-187	(	_	_	
1-38	187-191	step	_	_	
1-39	192-196	1905	_	_	
1-40	196-197	)	_	_	
1-41	197-198	.	_	_	

#Text=Then, the correct amount of virtual memory is acquired from the OS#1 memory manager (step 1906), and the logical memory block in the virtual memory for a target OS is returned to the suspend controller 413 (step 1907).
#Text=[0157] As is described above, before OS#1 is shifted to the halted state, the above processing is performed in response to a call issued by the suspend controller 413.
2-1	199-203	Then	_	_	
2-2	203-204	,	_	_	
2-3	205-208	the	_	_	
2-4	209-216	correct	_	_	
2-5	217-223	amount	_	_	
2-6	224-226	of	_	_	
2-7	227-234	virtual	_	_	
2-8	235-241	memory	_	_	
2-9	242-244	is	_	_	
2-10	245-253	acquired	_	_	
2-11	254-258	from	_	_	
2-12	259-262	the	_	_	
2-13	263-265	OS	_	_	
2-14	265-267	#1	_	_	
2-15	268-274	memory	_	_	
2-16	275-282	manager	_	_	
2-17	283-284	(	_	_	
2-18	284-288	step	_	_	
2-19	289-293	1906	_	_	
2-20	293-294	)	_	_	
2-21	294-295	,	_	_	
2-22	296-299	and	_	_	
2-23	300-303	the	_	_	
2-24	304-311	logical	_	_	
2-25	312-318	memory	_	_	
2-26	319-324	block	_	_	
2-27	325-327	in	_	_	
2-28	328-331	the	_	_	
2-29	332-339	virtual	_	_	
2-30	340-346	memory	_	_	
2-31	347-350	for	_	_	
2-32	351-352	a	_	_	
2-33	353-359	target	_	_	
2-34	360-362	OS	_	_	
2-35	363-365	is	_	_	
2-36	366-374	returned	_	_	
2-37	375-377	to	_	_	
2-38	378-381	the	_	_	
2-39	382-389	suspend	_	_	
2-40	390-400	controller	_	_	
2-41	401-404	413	_	_	
2-42	405-406	(	_	_	
2-43	406-410	step	_	_	
2-44	411-415	1907	_	_	
2-45	415-416	)	_	_	
2-46	416-417	.	_	_	
2-47	418-419	[	_	_	
2-48	419-423	0157	_	_	
2-49	423-424	]	_	_	
2-50	425-427	As	_	_	
2-51	428-430	is	_	_	
2-52	431-440	described	_	_	
2-53	441-446	above	_	_	
2-54	446-447	,	_	_	
2-55	448-454	before	_	_	
2-56	455-457	OS	_	_	
2-57	457-459	#1	_	_	
2-58	460-462	is	_	_	
2-59	463-470	shifted	_	_	
2-60	471-473	to	_	_	
2-61	474-477	the	_	_	
2-62	478-484	halted	_	_	
2-63	485-490	state	_	_	
2-64	490-491	,	_	_	
2-65	492-495	the	_	_	
2-66	496-501	above	_	_	
2-67	502-512	processing	_	_	
2-68	513-515	is	_	_	
2-69	516-525	performed	_	_	
2-70	526-528	in	_	_	
2-71	529-537	response	_	_	
2-72	538-540	to	_	_	
2-73	541-542	a	_	_	
2-74	543-547	call	_	_	
2-75	548-554	issued	_	_	
2-76	555-557	by	_	_	
2-77	558-561	the	_	_	
2-78	562-569	suspend	_	_	
2-79	570-580	controller	_	_	
2-80	581-584	413	_	_	
2-81	584-585	.	_	_	

#Text=Specifically, the OS switching event is initiated upon the receipt of a request from the OS#1 switching user interface 412, and in accordance with the OS switching event, the above processing is requested each time and is executed by the suspend controller 413.
3-1	586-598	Specifically	_	_	
3-2	598-599	,	_	_	
3-3	600-603	the	_	_	
3-4	604-606	OS	_	_	
3-5	607-616	switching	_	_	
3-6	617-622	event	_	_	
3-7	623-625	is	_	_	
3-8	626-635	initiated	_	_	
3-9	636-640	upon	_	_	
3-10	641-644	the	_	_	
3-11	645-652	receipt	_	_	
3-12	653-655	of	_	_	
3-13	656-657	a	_	_	
3-14	658-665	request	_	_	
3-15	666-670	from	_	_	
3-16	671-674	the	_	_	
3-17	675-677	OS	_	_	
3-18	677-679	#1	_	_	
3-19	680-689	switching	_	_	
3-20	690-694	user	_	_	
3-21	695-704	interface	_	_	
3-22	705-708	412	_	_	
3-23	708-709	,	_	_	
3-24	710-713	and	_	_	
3-25	714-716	in	_	_	
3-26	717-727	accordance	_	_	
3-27	728-732	with	_	_	
3-28	733-736	the	_	_	
3-29	737-739	OS	_	_	
3-30	740-749	switching	_	_	
3-31	750-755	event	_	_	
3-32	755-756	,	_	_	
3-33	757-760	the	_	_	
3-34	761-766	above	_	_	
3-35	767-777	processing	_	_	
3-36	778-780	is	_	_	
3-37	781-790	requested	_	_	
3-38	791-795	each	_	_	
3-39	796-800	time	_	_	
3-40	801-804	and	_	_	
3-41	805-807	is	_	_	
3-42	808-816	executed	_	_	
3-43	817-819	by	_	_	
3-44	820-823	the	_	_	
3-45	824-831	suspend	_	_	
3-46	832-842	controller	_	_	
3-47	843-846	413	_	_	
3-48	846-847	.	_	_	

#Text=This is appropriate in a case wherein the employment frequency is low for an OS that is to be switched to, and where for the efficient use of memory it is not preferable that a memory area be acquired and retained for use by an OS beginning at the time the system was activated.
#Text=[0158] For a case wherein it is understood that the employment frequency of the OS is high and that the suspend function is employed for OS switching, when OS#1 is booted, the non-pageable memory may be acquired in advance by an initial routine performed by the virtual memory acquisition and management unit 416.
4-1	848-852	This	_	_	
4-2	853-855	is	_	_	
4-3	856-867	appropriate	_	_	
4-4	868-870	in	_	_	
4-5	871-872	a	_	_	
4-6	873-877	case	_	_	
4-7	878-885	wherein	_	_	
4-8	886-889	the	_	_	
4-9	890-900	employment	_	_	
4-10	901-910	frequency	_	_	
4-11	911-913	is	_	_	
4-12	914-917	low	_	_	
4-13	918-921	for	_	_	
4-14	922-924	an	_	_	
4-15	925-927	OS	_	_	
4-16	928-932	that	_	_	
4-17	933-935	is	_	_	
4-18	936-938	to	_	_	
4-19	939-941	be	_	_	
4-20	942-950	switched	_	_	
4-21	951-953	to	_	_	
4-22	953-954	,	_	_	
4-23	955-958	and	_	_	
4-24	959-964	where	_	_	
4-25	965-968	for	_	_	
4-26	969-972	the	_	_	
4-27	973-982	efficient	_	_	
4-28	983-986	use	_	_	
4-29	987-989	of	_	_	
4-30	990-996	memory	_	_	
4-31	997-999	it	_	_	
4-32	1000-1002	is	_	_	
4-33	1003-1006	not	_	_	
4-34	1007-1017	preferable	_	_	
4-35	1018-1022	that	_	_	
4-36	1023-1024	a	_	_	
4-37	1025-1031	memory	_	_	
4-38	1032-1036	area	_	_	
4-39	1037-1039	be	_	_	
4-40	1040-1048	acquired	_	_	
4-41	1049-1052	and	_	_	
4-42	1053-1061	retained	_	_	
4-43	1062-1065	for	_	_	
4-44	1066-1069	use	_	_	
4-45	1070-1072	by	_	_	
4-46	1073-1075	an	_	_	
4-47	1076-1078	OS	_	_	
4-48	1079-1088	beginning	_	_	
4-49	1089-1091	at	_	_	
4-50	1092-1095	the	_	_	
4-51	1096-1100	time	_	_	
4-52	1101-1104	the	_	_	
4-53	1105-1111	system	_	_	
4-54	1112-1115	was	_	_	
4-55	1116-1125	activated	_	_	
4-56	1125-1126	.	_	_	
4-57	1127-1128	[	*[1]	5-1[2_1]	
4-58	1128-1132	0158	*[1]	_	
4-59	1132-1133	]	*[1]	_	
4-60	1134-1137	For	*[1]	_	
4-61	1138-1139	a	*[1]	_	
4-62	1140-1144	case	*[1]	_	
4-63	1145-1152	wherein	*[1]	_	
4-64	1153-1155	it	*[1]	_	
4-65	1156-1158	is	*[1]	_	
4-66	1159-1169	understood	*[1]	_	
4-67	1170-1174	that	*[1]	_	
4-68	1175-1178	the	*[1]	_	
4-69	1179-1189	employment	*[1]	_	
4-70	1190-1199	frequency	*[1]	_	
4-71	1200-1202	of	*[1]	_	
4-72	1203-1206	the	*[1]	_	
4-73	1207-1209	OS	*[1]	_	
4-74	1210-1212	is	*[1]	_	
4-75	1213-1217	high	*[1]	_	
4-76	1218-1221	and	*[1]	_	
4-77	1222-1226	that	*[1]	_	
4-78	1227-1230	the	*[1]	_	
4-79	1231-1238	suspend	*[1]	_	
4-80	1239-1247	function	*[1]	_	
4-81	1248-1250	is	*[1]	_	
4-82	1251-1259	employed	*[1]	_	
4-83	1260-1263	for	*[1]	_	
4-84	1264-1266	OS	*[1]	_	
4-85	1267-1276	switching	*[1]	_	
4-86	1276-1277	,	*[1]	_	
4-87	1278-1282	when	*[1]	_	
4-88	1283-1285	OS	*[1]	_	
4-89	1285-1287	#1	*[1]	_	
4-90	1288-1290	is	*[1]	_	
4-91	1291-1297	booted	*[1]	_	
4-92	1297-1298	,	*[1]	_	
4-93	1299-1302	the	*[1]	_	
4-94	1303-1315	non-pageable	*[1]	_	
4-95	1316-1322	memory	*[1]	_	
4-96	1323-1326	may	*[1]	_	
4-97	1327-1329	be	*[1]	_	
4-98	1330-1338	acquired	*[1]	_	
4-99	1339-1341	in	*[1]	_	
4-100	1342-1349	advance	*[1]	_	
4-101	1350-1352	by	*[1]	_	
4-102	1353-1355	an	*[1]	_	
4-103	1356-1363	initial	*[1]	_	
4-104	1364-1371	routine	*[1]	_	
4-105	1372-1381	performed	*[1]	_	
4-106	1382-1384	by	*[1]	_	
4-107	1385-1388	the	*[1]	_	
4-108	1389-1396	virtual	*[1]	_	
4-109	1397-1403	memory	*[1]	_	
4-110	1404-1415	acquisition	*[1]	_	
4-111	1416-1419	and	*[1]	_	
4-112	1420-1430	management	*[1]	_	
4-113	1431-1435	unit	*[1]	_	
4-114	1436-1439	416	*[1]	_	
4-115	1439-1440	.	*[1]	_	

#Text=This method is appropriate for a case wherein a predetermined OS and OS#1 are designated in advance, i.e., wherein among multiple coexisting OSs, including OS#1, the employment frequency does not differ very much.
#Text=[0159] An explanation will now be given for the process for releasing virtual memory that is obtained to load an OS.
5-1	1441-1445	This	*[2]	_	
5-2	1446-1452	method	*[2]	_	
5-3	1453-1455	is	_	_	
5-4	1456-1467	appropriate	_	_	
5-5	1468-1471	for	_	_	
5-6	1472-1473	a	_	_	
5-7	1474-1478	case	_	_	
5-8	1479-1486	wherein	_	_	
5-9	1487-1488	a	_	_	
5-10	1489-1502	predetermined	_	_	
5-11	1503-1505	OS	_	_	
5-12	1506-1509	and	_	_	
5-13	1510-1512	OS	_	_	
5-14	1512-1514	#1	_	_	
5-15	1515-1518	are	_	_	
5-16	1519-1529	designated	_	_	
5-17	1530-1532	in	_	_	
5-18	1533-1540	advance	_	_	
5-19	1540-1541	,	_	_	
5-20	1542-1545	i.e	_	_	
5-21	1545-1546	.	_	_	
5-22	1546-1547	,	_	_	
5-23	1548-1555	wherein	_	_	
5-24	1556-1561	among	_	_	
5-25	1562-1570	multiple	_	_	
5-26	1571-1581	coexisting	_	_	
5-27	1582-1585	OSs	_	_	
5-28	1585-1586	,	_	_	
5-29	1587-1596	including	_	_	
5-30	1597-1599	OS	_	_	
5-31	1599-1601	#1	_	_	
5-32	1601-1602	,	_	_	
5-33	1603-1606	the	_	_	
5-34	1607-1617	employment	_	_	
5-35	1618-1627	frequency	_	_	
5-36	1628-1632	does	_	_	
5-37	1633-1636	not	_	_	
5-38	1637-1643	differ	_	_	
5-39	1644-1648	very	_	_	
5-40	1649-1653	much	_	_	
5-41	1653-1654	.	_	_	
5-42	1655-1656	[	_	_	
5-43	1656-1660	0159	_	_	
5-44	1660-1661	]	_	_	
5-45	1662-1664	An	_	_	
5-46	1665-1676	explanation	_	_	
5-47	1677-1681	will	_	_	
5-48	1682-1685	now	_	_	
5-49	1686-1688	be	_	_	
5-50	1689-1694	given	_	_	
5-51	1695-1698	for	_	_	
5-52	1699-1702	the	_	_	
5-53	1703-1710	process	_	_	
5-54	1711-1714	for	_	_	
5-55	1715-1724	releasing	_	_	
5-56	1725-1732	virtual	_	_	
5-57	1733-1739	memory	_	_	
5-58	1740-1744	that	_	_	
5-59	1745-1747	is	_	_	
5-60	1748-1756	obtained	_	_	
5-61	1757-1759	to	_	_	
5-62	1760-1764	load	_	_	
5-63	1765-1767	an	_	_	
5-64	1768-1770	OS	_	_	
5-65	1770-1771	.	_	_	

#Text=When an additional OS that was called and was used only one time has been terminated, or when a pertinent OS does not have the suspend function so that the shut-down and rebooting processes must be performed to change the OS, it is inefficient to obtain and hold virtual memory.
6-1	1772-1776	When	_	_	
6-2	1777-1779	an	_	_	
6-3	1780-1790	additional	_	_	
6-4	1791-1793	OS	_	_	
6-5	1794-1798	that	_	_	
6-6	1799-1802	was	_	_	
6-7	1803-1809	called	_	_	
6-8	1810-1813	and	_	_	
6-9	1814-1817	was	_	_	
6-10	1818-1822	used	_	_	
6-11	1823-1827	only	_	_	
6-12	1828-1831	one	_	_	
6-13	1832-1836	time	_	_	
6-14	1837-1840	has	_	_	
6-15	1841-1845	been	_	_	
6-16	1846-1856	terminated	_	_	
6-17	1856-1857	,	_	_	
6-18	1858-1860	or	_	_	
6-19	1861-1865	when	_	_	
6-20	1866-1867	a	_	_	
6-21	1868-1877	pertinent	_	_	
6-22	1878-1880	OS	_	_	
6-23	1881-1885	does	_	_	
6-24	1886-1889	not	_	_	
6-25	1890-1894	have	_	_	
6-26	1895-1898	the	_	_	
6-27	1899-1906	suspend	_	_	
6-28	1907-1915	function	_	_	
6-29	1916-1918	so	_	_	
6-30	1919-1923	that	_	_	
6-31	1924-1927	the	_	_	
6-32	1928-1937	shut-down	_	_	
6-33	1938-1941	and	_	_	
6-34	1942-1951	rebooting	_	_	
6-35	1952-1961	processes	_	_	
6-36	1962-1966	must	_	_	
6-37	1967-1969	be	_	_	
6-38	1970-1979	performed	_	_	
6-39	1980-1982	to	_	_	
6-40	1983-1989	change	_	_	
6-41	1990-1993	the	_	_	
6-42	1994-1996	OS	_	_	
6-43	1996-1997	,	_	_	
6-44	1998-2000	it	_	_	
6-45	2001-2003	is	_	_	
6-46	2004-2015	inefficient	_	_	
6-47	2016-2018	to	_	_	
6-48	2019-2025	obtain	_	_	
6-49	2026-2029	and	_	_	
6-50	2030-2034	hold	_	_	
6-51	2035-2042	virtual	_	_	
6-52	2043-2049	memory	_	_	
6-53	2049-2050	.	_	_	

#Text=Thus, when the OS that was called is replaced by OS#1, the virtual memory that was obtained for the pertinent OS is released.
#Text=[0160] Further, when together with a switching instruction a message that the use of the OS (OS#2 or OS#3) that was called is not currently planned is issued by the user through the corresponding OS switching user interface 422 or 432, the message is transmitted via the logical memory division controller 403 to OS#1.
7-1	2051-2055	Thus	_	_	
7-2	2055-2056	,	_	_	
7-3	2057-2061	when	_	_	
7-4	2062-2065	the	_	_	
7-5	2066-2068	OS	_	_	
7-6	2069-2073	that	_	_	
7-7	2074-2077	was	_	_	
7-8	2078-2084	called	_	_	
7-9	2085-2087	is	_	_	
7-10	2088-2096	replaced	_	_	
7-11	2097-2099	by	_	_	
7-12	2100-2102	OS	_	_	
7-13	2102-2104	#1	_	_	
7-14	2104-2105	,	_	_	
7-15	2106-2109	the	_	_	
7-16	2110-2117	virtual	_	_	
7-17	2118-2124	memory	_	_	
7-18	2125-2129	that	_	_	
7-19	2130-2133	was	_	_	
7-20	2134-2142	obtained	_	_	
7-21	2143-2146	for	_	_	
7-22	2147-2150	the	_	_	
7-23	2151-2160	pertinent	_	_	
7-24	2161-2163	OS	_	_	
7-25	2164-2166	is	_	_	
7-26	2167-2175	released	_	_	
7-27	2175-2176	.	_	_	
7-28	2177-2178	[	_	_	
7-29	2178-2182	0160	_	_	
7-30	2182-2183	]	_	_	
7-31	2184-2191	Further	_	_	
7-32	2191-2192	,	_	_	
7-33	2193-2197	when	_	_	
7-34	2198-2206	together	_	_	
7-35	2207-2211	with	_	_	
7-36	2212-2213	a	_	_	
7-37	2214-2223	switching	_	_	
7-38	2224-2235	instruction	_	_	
7-39	2236-2237	a	_	_	
7-40	2238-2245	message	_	_	
7-41	2246-2250	that	_	_	
7-42	2251-2254	the	_	_	
7-43	2255-2258	use	_	_	
7-44	2259-2261	of	_	_	
7-45	2262-2265	the	_	_	
7-46	2266-2268	OS	_	_	
7-47	2269-2270	(	_	_	
7-48	2270-2272	OS	_	_	
7-49	2272-2274	#2	_	_	
7-50	2275-2277	or	_	_	
7-51	2278-2280	OS	_	_	
7-52	2280-2282	#3	_	_	
7-53	2282-2283	)	_	_	
7-54	2284-2288	that	_	_	
7-55	2289-2292	was	_	_	
7-56	2293-2299	called	_	_	
7-57	2300-2302	is	_	_	
7-58	2303-2306	not	_	_	
7-59	2307-2316	currently	_	_	
7-60	2317-2324	planned	_	_	
7-61	2325-2327	is	_	_	
7-62	2328-2334	issued	_	_	
7-63	2335-2337	by	_	_	
7-64	2338-2341	the	_	_	
7-65	2342-2346	user	_	_	
7-66	2347-2354	through	_	_	
7-67	2355-2358	the	_	_	
7-68	2359-2372	corresponding	_	_	
7-69	2373-2375	OS	_	_	
7-70	2376-2385	switching	_	_	
7-71	2386-2390	user	_	_	
7-72	2391-2400	interface	_	_	
7-73	2401-2404	422	_	_	
7-74	2405-2407	or	_	_	
7-75	2408-2411	432	_	_	
7-76	2411-2412	,	_	_	
7-77	2413-2416	the	_	_	
7-78	2417-2424	message	_	_	
7-79	2425-2427	is	_	_	
7-80	2428-2439	transmitted	_	_	
7-81	2440-2443	via	_	_	
7-82	2444-2447	the	_	_	
7-83	2448-2455	logical	_	_	
7-84	2456-2462	memory	_	_	
7-85	2463-2471	division	_	_	
7-86	2472-2482	controller	_	_	
7-87	2483-2486	403	_	_	
7-88	2487-2489	to	_	_	
7-89	2490-2492	OS	_	_	
7-90	2492-2494	#1	_	_	
7-91	2494-2495	.	_	_	

#Text=Upon the receipt of this message, the OS#1 resume controller 414 instructs the virtual memory acquisition and management unit 416 to request that the OS#1 memory manager release the virtual memory.
8-1	2496-2500	Upon	_	_	
8-2	2501-2504	the	_	_	
8-3	2505-2512	receipt	_	_	
8-4	2513-2515	of	_	_	
8-5	2516-2520	this	_	_	
8-6	2521-2528	message	_	_	
8-7	2528-2529	,	_	_	
8-8	2530-2533	the	_	_	
8-9	2534-2536	OS	_	_	
8-10	2536-2538	#1	_	_	
8-11	2539-2545	resume	_	_	
8-12	2546-2556	controller	_	_	
8-13	2557-2560	414	_	_	
8-14	2561-2570	instructs	_	_	
8-15	2571-2574	the	_	_	
8-16	2575-2582	virtual	_	_	
8-17	2583-2589	memory	_	_	
8-18	2590-2601	acquisition	_	_	
8-19	2602-2605	and	_	_	
8-20	2606-2616	management	_	_	
8-21	2617-2621	unit	_	_	
8-22	2622-2625	416	_	_	
8-23	2626-2628	to	_	_	
8-24	2629-2636	request	_	_	
8-25	2637-2641	that	_	_	
8-26	2642-2645	the	_	_	
8-27	2646-2648	OS	_	_	
8-28	2648-2650	#1	_	_	
8-29	2651-2657	memory	_	_	
8-30	2658-2665	manager	_	_	
8-31	2666-2673	release	_	_	
8-32	2674-2677	the	_	_	
8-33	2678-2685	virtual	_	_	
8-34	2686-2692	memory	_	_	
8-35	2692-2693	.	_	_	
