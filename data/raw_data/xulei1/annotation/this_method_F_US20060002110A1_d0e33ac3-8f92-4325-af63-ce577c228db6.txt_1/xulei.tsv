#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0452] At this point, the algorithm goes back one bit in the identifier (in the present example, this is the third bit 3810) and checks to see if a flag was set for this bit.
1-1	0-1	[	_	_	
1-2	1-5	0452	_	_	
1-3	5-6	]	_	_	
1-4	7-9	At	_	_	
1-5	10-14	this	_	_	
1-6	15-20	point	_	_	
1-7	20-21	,	_	_	
1-8	22-25	the	_	_	
1-9	26-35	algorithm	_	_	
1-10	36-40	goes	_	_	
1-11	41-45	back	_	_	
1-12	46-49	one	_	_	
1-13	50-53	bit	_	_	
1-14	54-56	in	_	_	
1-15	57-60	the	_	_	
1-16	61-71	identifier	_	_	
1-17	72-73	(	_	_	
1-18	73-75	in	_	_	
1-19	76-79	the	_	_	
1-20	80-87	present	_	_	
1-21	88-95	example	_	_	
1-22	95-96	,	_	_	
1-23	97-101	this	_	_	
1-24	102-104	is	_	_	
1-25	105-108	the	_	_	
1-26	109-114	third	_	_	
1-27	115-118	bit	_	_	
1-28	119-123	3810	_	_	
1-29	123-124	)	_	_	
1-30	125-128	and	_	_	
1-31	129-135	checks	_	_	
1-32	136-138	to	_	_	
1-33	139-142	see	_	_	
1-34	143-145	if	_	_	
1-35	146-147	a	_	_	
1-36	148-152	flag	_	_	
1-37	153-156	was	_	_	
1-38	157-160	set	_	_	
1-39	161-164	for	_	_	
1-40	165-169	this	_	_	
1-41	170-173	bit	_	_	
1-42	173-174	.	_	_	

#Text=As pointed out above, indeed the flag for the third bit was set (i.e., no identifiers corresponded to "111X").
2-1	175-177	As	_	_	
2-2	178-185	pointed	_	_	
2-3	186-189	out	_	_	
2-4	190-195	above	_	_	
2-5	195-196	,	_	_	
2-6	197-203	indeed	_	_	
2-7	204-207	the	_	_	
2-8	208-212	flag	_	_	
2-9	213-216	for	_	_	
2-10	217-220	the	_	_	
2-11	221-226	third	_	_	
2-12	227-230	bit	_	_	
2-13	231-234	was	_	_	
2-14	235-238	set	_	_	
2-15	239-240	(	_	_	
2-16	240-243	i.e	_	_	
2-17	243-244	.	_	_	
2-18	244-245	,	_	_	
2-19	246-248	no	_	_	
2-20	249-260	identifiers	_	_	
2-21	261-273	corresponded	_	_	
2-22	274-276	to	_	_	
2-23	277-278	"	_	_	
2-24	278-282	111X	_	_	
2-25	282-283	"	_	_	
2-26	283-284	)	_	_	
2-27	284-285	.	_	_	

#Text=The algorithm then checks to see if it has arrived back at the first (highest order) bit 3804 again, and if not, goes back yet another bit (to the second bit 3808).
3-1	286-289	The	_	_	
3-2	290-299	algorithm	_	_	
3-3	300-304	then	_	_	
3-4	305-311	checks	_	_	
3-5	312-314	to	_	_	
3-6	315-318	see	_	_	
3-7	319-321	if	_	_	
3-8	322-324	it	_	_	
3-9	325-328	has	_	_	
3-10	329-336	arrived	_	_	
3-11	337-341	back	_	_	
3-12	342-344	at	_	_	
3-13	345-348	the	_	_	
3-14	349-354	first	_	_	
3-15	355-356	(	_	_	
3-16	356-363	highest	_	_	
3-17	364-369	order	_	_	
3-18	369-370	)	_	_	
3-19	371-374	bit	_	_	
3-20	375-379	3804	_	_	
3-21	380-385	again	_	_	
3-22	385-386	,	_	_	
3-23	387-390	and	_	_	
3-24	391-393	if	_	_	
3-25	394-397	not	_	_	
3-26	397-398	,	_	_	
3-27	399-403	goes	_	_	
3-28	404-408	back	_	_	
3-29	409-412	yet	_	_	
3-30	413-420	another	_	_	
3-31	421-424	bit	_	_	
3-32	425-426	(	_	_	
3-33	426-428	to	_	_	
3-34	429-432	the	_	_	
3-35	433-439	second	_	_	
3-36	440-443	bit	_	_	
3-37	444-448	3808	_	_	
3-38	448-449	)	_	_	
3-39	449-450	.	_	_	

#Text=Since no flag has yet been set for this bit (it is currently a "1"), the algorithm changes the state of the second bit (i.e., to a "0" in the present example), and sends a global command to all lighting units to energize their light sources if their respective identifiers begin with "10" (i.e., 10XX).
4-1	451-456	Since	_	_	
4-2	457-459	no	_	_	
4-3	460-464	flag	_	_	
4-4	465-468	has	_	_	
4-5	469-472	yet	_	_	
4-6	473-477	been	_	_	
4-7	478-481	set	_	_	
4-8	482-485	for	_	_	
4-9	486-490	this	_	_	
4-10	491-494	bit	_	_	
4-11	495-496	(	_	_	
4-12	496-498	it	_	_	
4-13	499-501	is	_	_	
4-14	502-511	currently	_	_	
4-15	512-513	a	_	_	
4-16	514-515	"	_	_	
4-17	515-516	1	_	_	
4-18	516-517	"	_	_	
4-19	517-518	)	_	_	
4-20	518-519	,	_	_	
4-21	520-523	the	_	_	
4-22	524-533	algorithm	_	_	
4-23	534-541	changes	_	_	
4-24	542-545	the	_	_	
4-25	546-551	state	_	_	
4-26	552-554	of	_	_	
4-27	555-558	the	_	_	
4-28	559-565	second	_	_	
4-29	566-569	bit	_	_	
4-30	570-571	(	_	_	
4-31	571-574	i.e	_	_	
4-32	574-575	.	_	_	
4-33	575-576	,	_	_	
4-34	577-579	to	_	_	
4-35	580-581	a	_	_	
4-36	582-583	"	_	_	
4-37	583-584	0	_	_	
4-38	584-585	"	_	_	
4-39	586-588	in	_	_	
4-40	589-592	the	_	_	
4-41	593-600	present	_	_	
4-42	601-608	example	_	_	
4-43	608-609	)	_	_	
4-44	609-610	,	_	_	
4-45	611-614	and	_	_	
4-46	615-620	sends	_	_	
4-47	621-622	a	_	_	
4-48	623-629	global	_	_	
4-49	630-637	command	_	_	
4-50	638-640	to	_	_	
4-51	641-644	all	_	_	
4-52	645-653	lighting	_	_	
4-53	654-659	units	_	_	
4-54	660-662	to	_	_	
4-55	663-671	energize	_	_	
4-56	672-677	their	_	_	
4-57	678-683	light	_	_	
4-58	684-691	sources	_	_	
4-59	692-694	if	_	_	
4-60	695-700	their	_	_	
4-61	701-711	respective	_	_	
4-62	712-723	identifiers	_	_	
4-63	724-729	begin	_	_	
4-64	730-734	with	_	_	
4-65	735-736	"	_	_	
4-66	736-738	10	_	_	
4-67	738-739	"	_	_	
4-68	740-741	(	_	_	
4-69	741-744	i.e	_	_	
4-70	744-745	.	_	_	
4-71	745-746	,	_	_	
4-72	747-751	10XX	_	_	
4-73	751-752	)	_	_	
4-74	752-753	.	_	_	

#Text=In the current example, the third lighting unit energizes its light sources, and hence power is drawn.
5-1	754-756	In	_	_	
5-2	757-760	the	_	_	
5-3	761-768	current	_	_	
5-4	769-776	example	_	_	
5-5	776-777	,	_	_	
5-6	778-781	the	_	_	
5-7	782-787	third	_	_	
5-8	788-796	lighting	_	_	
5-9	797-801	unit	_	_	
5-10	802-811	energizes	_	_	
5-11	812-815	its	_	_	
5-12	816-821	light	_	_	
5-13	822-829	sources	_	_	
5-14	829-830	,	_	_	
5-15	831-834	and	_	_	
5-16	835-840	hence	_	_	
5-17	841-846	power	_	_	
5-18	847-849	is	_	_	
5-19	850-855	drawn	_	_	
5-20	855-856	.	_	_	

#Text=Accordingly, the algorithm then sets the flag for this second bit, clears any lower order flags that may have been previously set (e.g., for the third or fourth bits 3810 and 3812), and returns to adding another bit 3810 with the same state as the previous bit.
6-1	857-868	Accordingly	_	_	
6-2	868-869	,	_	_	
6-3	870-873	the	_	_	
6-4	874-883	algorithm	_	_	
6-5	884-888	then	_	_	
6-6	889-893	sets	_	_	
6-7	894-897	the	_	_	
6-8	898-902	flag	_	_	
6-9	903-906	for	_	_	
6-10	907-911	this	_	_	
6-11	912-918	second	_	_	
6-12	919-922	bit	_	_	
6-13	922-923	,	_	_	
6-14	924-930	clears	_	_	
6-15	931-934	any	_	_	
6-16	935-940	lower	_	_	
6-17	941-946	order	_	_	
6-18	947-952	flags	_	_	
6-19	953-957	that	_	_	
6-20	958-961	may	_	_	
6-21	962-966	have	_	_	
6-22	967-971	been	_	_	
6-23	972-982	previously	_	_	
6-24	983-986	set	_	_	
6-25	987-988	(	_	_	
6-26	988-991	e.g	_	_	
6-27	991-992	.	_	_	
6-28	992-993	,	_	_	
6-29	994-997	for	_	_	
6-30	998-1001	the	_	_	
6-31	1002-1007	third	_	_	
6-32	1008-1010	or	_	_	
6-33	1011-1017	fourth	_	_	
6-34	1018-1022	bits	_	_	
6-35	1023-1027	3810	_	_	
6-36	1028-1031	and	_	_	
6-37	1032-1036	3812	_	_	
6-38	1036-1037	)	_	_	
6-39	1037-1038	,	_	_	
6-40	1039-1042	and	_	_	
6-41	1043-1050	returns	_	_	
6-42	1051-1053	to	_	_	
6-43	1054-1060	adding	_	_	
6-44	1061-1068	another	_	_	
6-45	1069-1072	bit	_	_	
6-46	1073-1077	3810	_	_	
6-47	1078-1082	with	_	_	
6-48	1083-1086	the	_	_	
6-49	1087-1091	same	_	_	
6-50	1092-1097	state	_	_	
6-51	1098-1100	as	_	_	
6-52	1101-1104	the	_	_	
6-53	1105-1113	previous	_	_	
6-54	1114-1117	bit	_	_	
6-55	1117-1118	.	_	_	

#Text=From this point, the algorithm executes as described above until ultimately it learns the identifier 1402C of the third lighting unit (i.e., 1011), and determines that no other lighting units are coupled to the LUC.
#Text=[0453] Again, it should be appreciated that although an example of four bit identifiers was used for purposes of illustration, the algorithm may be applied similarly to determine identifiers having an arbitrary number of bits.
7-1	1119-1123	From	_	_	
7-2	1124-1128	this	_	_	
7-3	1129-1134	point	_	_	
7-4	1134-1135	,	_	_	
7-5	1136-1139	the	_	_	
7-6	1140-1149	algorithm	_	_	
7-7	1150-1158	executes	_	_	
7-8	1159-1161	as	_	_	
7-9	1162-1171	described	_	_	
7-10	1172-1177	above	_	_	
7-11	1178-1183	until	_	_	
7-12	1184-1194	ultimately	_	_	
7-13	1195-1197	it	_	_	
7-14	1198-1204	learns	_	_	
7-15	1205-1208	the	_	_	
7-16	1209-1219	identifier	_	_	
7-17	1220-1225	1402C	_	_	
7-18	1226-1228	of	_	_	
7-19	1229-1232	the	_	_	
7-20	1233-1238	third	_	_	
7-21	1239-1247	lighting	_	_	
7-22	1248-1252	unit	_	_	
7-23	1253-1254	(	_	_	
7-24	1254-1257	i.e	_	_	
7-25	1257-1258	.	_	_	
7-26	1258-1259	,	_	_	
7-27	1260-1264	1011	_	_	
7-28	1264-1265	)	_	_	
7-29	1265-1266	,	_	_	
7-30	1267-1270	and	_	_	
7-31	1271-1281	determines	_	_	
7-32	1282-1286	that	_	_	
7-33	1287-1289	no	_	_	
7-34	1290-1295	other	_	_	
7-35	1296-1304	lighting	_	_	
7-36	1305-1310	units	_	_	
7-37	1311-1314	are	_	_	
7-38	1315-1322	coupled	_	_	
7-39	1323-1325	to	_	_	
7-40	1326-1329	the	_	_	
7-41	1330-1333	LUC	_	_	
7-42	1333-1334	.	_	_	
7-43	1335-1336	[	_	_	
7-44	1336-1340	0453	_	_	
7-45	1340-1341	]	_	_	
7-46	1342-1347	Again	_	_	
7-47	1347-1348	,	_	_	
7-48	1349-1351	it	_	_	
7-49	1352-1358	should	_	_	
7-50	1359-1361	be	_	_	
7-51	1362-1373	appreciated	_	_	
7-52	1374-1378	that	_	_	
7-53	1379-1387	although	_	_	
7-54	1388-1390	an	_	_	
7-55	1391-1398	example	_	_	
7-56	1399-1401	of	_	_	
7-57	1402-1406	four	_	_	
7-58	1407-1410	bit	_	_	
7-59	1411-1422	identifiers	_	_	
7-60	1423-1426	was	_	_	
7-61	1427-1431	used	_	_	
7-62	1432-1435	for	_	_	
7-63	1436-1444	purposes	_	_	
7-64	1445-1447	of	_	_	
7-65	1448-1460	illustration	_	_	
7-66	1460-1461	,	_	_	
7-67	1462-1465	the	_	_	
7-68	1466-1475	algorithm	_	_	
7-69	1476-1479	may	_	_	
7-70	1480-1482	be	_	_	
7-71	1483-1490	applied	_	_	
7-72	1491-1500	similarly	_	_	
7-73	1501-1503	to	_	_	
7-74	1504-1513	determine	_	_	
7-75	1514-1525	identifiers	_	_	
7-76	1526-1532	having	_	_	
7-77	1533-1535	an	_	_	
7-78	1536-1545	arbitrary	_	_	
7-79	1546-1552	number	_	_	
7-80	1553-1555	of	_	_	
7-81	1556-1560	bits	_	_	
7-82	1560-1561	.	_	_	

#Text=Furthermore, it should be appreciated that this is merely one example of an identifier determination/learning algorithm, and that other methods for determining/learning identifiers may be implemented according to other embodiments of the invention.
#Text=[0454] In this method, the central controller, 3500, determines either that (i) no devices respond or (ii) at least one device on the network responds.
#Text=[0455] The algorithmic sequence is a mask and value sequence that with algorithmic methods can rapidly determine the identifiers of all of the network devices.
8-1	1562-1573	Furthermore	_	_	
8-2	1573-1574	,	_	_	
8-3	1575-1577	it	_	_	
8-4	1578-1584	should	_	_	
8-5	1585-1587	be	_	_	
8-6	1588-1599	appreciated	_	_	
8-7	1600-1604	that	_	_	
8-8	1605-1609	this	_	_	
8-9	1610-1612	is	_	_	
8-10	1613-1619	merely	_	_	
8-11	1620-1623	one	_	_	
8-12	1624-1631	example	_	_	
8-13	1632-1634	of	_	_	
8-14	1635-1637	an	_	_	
8-15	1638-1648	identifier	_	_	
8-16	1649-1662	determination	_	_	
8-17	1662-1663	/	_	_	
8-18	1663-1671	learning	_	_	
8-19	1672-1681	algorithm	_	_	
8-20	1681-1682	,	_	_	
8-21	1683-1686	and	_	_	
8-22	1687-1691	that	_	_	
8-23	1692-1697	other	*[1]	8-45[2_1]	
8-24	1698-1705	methods	*[1]	_	
8-25	1706-1709	for	*[1]	_	
8-26	1710-1721	determining	*[1]	_	
8-27	1721-1722	/	*[1]	_	
8-28	1722-1730	learning	*[1]	_	
8-29	1731-1742	identifiers	*[1]	_	
8-30	1743-1746	may	_	_	
8-31	1747-1749	be	_	_	
8-32	1750-1761	implemented	_	_	
8-33	1762-1771	according	_	_	
8-34	1772-1774	to	_	_	
8-35	1775-1780	other	_	_	
8-36	1781-1792	embodiments	_	_	
8-37	1793-1795	of	_	_	
8-38	1796-1799	the	_	_	
8-39	1800-1809	invention	_	_	
8-40	1809-1810	.	_	_	
8-41	1811-1812	[	_	_	
8-42	1812-1816	0454	_	_	
8-43	1816-1817	]	_	_	
8-44	1818-1820	In	_	_	
8-45	1821-1825	this	*[2]	_	
8-46	1826-1832	method	*[2]	_	
8-47	1832-1833	,	_	_	
8-48	1834-1837	the	_	_	
8-49	1838-1845	central	_	_	
8-50	1846-1856	controller	_	_	
8-51	1856-1857	,	_	_	
8-52	1858-1862	3500	_	_	
8-53	1862-1863	,	_	_	
8-54	1864-1874	determines	_	_	
8-55	1875-1881	either	_	_	
8-56	1882-1886	that	_	_	
8-57	1887-1888	(	_	_	
8-58	1888-1889	i	_	_	
8-59	1889-1890	)	_	_	
8-60	1891-1893	no	_	_	
8-61	1894-1901	devices	_	_	
8-62	1902-1909	respond	_	_	
8-63	1910-1912	or	_	_	
8-64	1913-1914	(	_	_	
8-65	1914-1916	ii	_	_	
8-66	1916-1917	)	_	_	
8-67	1918-1920	at	_	_	
8-68	1921-1926	least	_	_	
8-69	1927-1930	one	_	_	
8-70	1931-1937	device	_	_	
8-71	1938-1940	on	_	_	
8-72	1941-1944	the	_	_	
8-73	1945-1952	network	_	_	
8-74	1953-1961	responds	_	_	
8-75	1961-1962	.	_	_	
8-76	1963-1964	[	_	_	
8-77	1964-1968	0455	_	_	
8-78	1968-1969	]	_	_	
8-79	1970-1973	The	_	_	
8-80	1974-1985	algorithmic	_	_	
8-81	1986-1994	sequence	_	_	
8-82	1995-1997	is	_	_	
8-83	1998-1999	a	_	_	
8-84	2000-2004	mask	_	_	
8-85	2005-2008	and	_	_	
8-86	2009-2014	value	_	_	
8-87	2015-2023	sequence	_	_	
8-88	2024-2028	that	_	_	
8-89	2029-2033	with	_	_	
8-90	2034-2045	algorithmic	_	_	
8-91	2046-2053	methods	_	_	
8-92	2054-2057	can	_	_	
8-93	2058-2065	rapidly	_	_	
8-94	2066-2075	determine	_	_	
8-95	2076-2079	the	_	_	
8-96	2080-2091	identifiers	_	_	
8-97	2092-2094	of	_	_	
8-98	2095-2098	all	_	_	
8-99	2099-2101	of	_	_	
8-100	2102-2105	the	_	_	
8-101	2106-2113	network	_	_	
8-102	2114-2121	devices	_	_	
8-103	2121-2122	.	_	_	

#Text=The queries continue to guide and refine the search, and the queries themselves become more complex as the tree of possibilities is traversed.
9-1	2123-2126	The	_	_	
9-2	2127-2134	queries	_	_	
9-3	2135-2143	continue	_	_	
9-4	2144-2146	to	_	_	
9-5	2147-2152	guide	_	_	
9-6	2153-2156	and	_	_	
9-7	2157-2163	refine	_	_	
9-8	2164-2167	the	_	_	
9-9	2168-2174	search	_	_	
9-10	2174-2175	,	_	_	
9-11	2176-2179	and	_	_	
9-12	2180-2183	the	_	_	
9-13	2184-2191	queries	_	_	
9-14	2192-2202	themselves	_	_	
9-15	2203-2209	become	_	_	
9-16	2210-2214	more	_	_	
9-17	2215-2222	complex	_	_	
9-18	2223-2225	as	_	_	
9-19	2226-2229	the	_	_	
9-20	2230-2234	tree	_	_	
9-21	2235-2237	of	_	_	
9-22	2238-2251	possibilities	_	_	
9-23	2252-2254	is	_	_	
9-24	2255-2264	traversed	_	_	
9-25	2264-2265	.	_	_	

#Text=As an example the query might be expressed in English as "Do you have a 1 in the first position, a 0 in the second position and a 1 in the third position?"
10-1	2266-2268	As	_	_	
10-2	2269-2271	an	_	_	
10-3	2272-2279	example	_	_	
10-4	2280-2283	the	_	_	
10-5	2284-2289	query	_	_	
10-6	2290-2295	might	_	_	
10-7	2296-2298	be	_	_	
10-8	2299-2308	expressed	_	_	
10-9	2309-2311	in	_	_	
10-10	2312-2319	English	_	_	
10-11	2320-2322	as	_	_	
10-12	2323-2324	"	_	_	
10-13	2324-2326	Do	_	_	
10-14	2327-2330	you	_	_	
10-15	2331-2335	have	_	_	
10-16	2336-2337	a	_	_	
10-17	2338-2339	1	_	_	
10-18	2340-2342	in	_	_	
10-19	2343-2346	the	_	_	
10-20	2347-2352	first	_	_	
10-21	2353-2361	position	_	_	
10-22	2361-2362	,	_	_	
10-23	2363-2364	a	_	_	
10-24	2365-2366	0	_	_	
10-25	2367-2369	in	_	_	
10-26	2370-2373	the	_	_	
10-27	2374-2380	second	_	_	
10-28	2381-2389	position	_	_	
10-29	2390-2393	and	_	_	
10-30	2394-2395	a	_	_	
10-31	2396-2397	1	_	_	
10-32	2398-2400	in	_	_	
10-33	2401-2404	the	_	_	
10-34	2405-2410	third	_	_	
10-35	2411-2419	position	_	_	
10-36	2419-2420	?	_	_	
10-37	2420-2421	"	_	_	

#Text=[0456] If no device satisfies the query, then all identifiers further down the search tree are pruned from the search.
11-1	2422-2423	[	_	_	
11-2	2423-2427	0456	_	_	
11-3	2427-2428	]	_	_	
11-4	2429-2431	If	_	_	
11-5	2432-2434	no	_	_	
11-6	2435-2441	device	_	_	
11-7	2442-2451	satisfies	_	_	
11-8	2452-2455	the	_	_	
11-9	2456-2461	query	_	_	
11-10	2461-2462	,	_	_	
11-11	2463-2467	then	_	_	
11-12	2468-2471	all	_	_	
11-13	2472-2483	identifiers	_	_	
11-14	2484-2491	further	_	_	
11-15	2492-2496	down	_	_	
11-16	2497-2500	the	_	_	
11-17	2501-2507	search	_	_	
11-18	2508-2512	tree	_	_	
11-19	2513-2516	are	_	_	
11-20	2517-2523	pruned	_	_	
11-21	2524-2528	from	_	_	
11-22	2529-2532	the	_	_	
11-23	2533-2539	search	_	_	
11-24	2539-2540	.	_	_	

#Text=If one or more devices satisfy the query then the search moves on to other bits to determine the unique identifier.
12-1	2541-2543	If	_	_	
12-2	2544-2547	one	_	_	
12-3	2548-2550	or	_	_	
12-4	2551-2555	more	_	_	
12-5	2556-2563	devices	_	_	
12-6	2564-2571	satisfy	_	_	
12-7	2572-2575	the	_	_	
12-8	2576-2581	query	_	_	
12-9	2582-2586	then	_	_	
12-10	2587-2590	the	_	_	
12-11	2591-2597	search	_	_	
12-12	2598-2603	moves	_	_	
12-13	2604-2606	on	_	_	
12-14	2607-2609	to	_	_	
12-15	2610-2615	other	_	_	
12-16	2616-2620	bits	_	_	
12-17	2621-2623	to	_	_	
12-18	2624-2633	determine	_	_	
12-19	2634-2637	the	_	_	
12-20	2638-2644	unique	_	_	
12-21	2645-2655	identifier	_	_	
12-22	2655-2656	.	_	_	

#Text=This is an efficient binary search technique.
13-1	2657-2661	This	_	_	
13-2	2662-2664	is	_	_	
13-3	2665-2667	an	_	_	
13-4	2668-2677	efficient	_	_	
13-5	2678-2684	binary	_	_	
13-6	2685-2691	search	_	_	
13-7	2692-2701	technique	_	_	
13-8	2701-2702	.	_	_	

#Text=After a rapid sequence of steps, the complete set of identifiers for all of the networked devices can be established.
14-1	2703-2708	After	_	_	
14-2	2709-2710	a	_	_	
14-3	2711-2716	rapid	_	_	
14-4	2717-2725	sequence	_	_	
14-5	2726-2728	of	_	_	
14-6	2729-2734	steps	_	_	
14-7	2734-2735	,	_	_	
14-8	2736-2739	the	_	_	
14-9	2740-2748	complete	_	_	
14-10	2749-2752	set	_	_	
14-11	2753-2755	of	_	_	
14-12	2756-2767	identifiers	_	_	
14-13	2768-2771	for	_	_	
14-14	2772-2775	all	_	_	
14-15	2776-2778	of	_	_	
14-16	2779-2782	the	_	_	
14-17	2783-2792	networked	_	_	
14-18	2793-2800	devices	_	_	
14-19	2801-2804	can	_	_	
14-20	2805-2807	be	_	_	
14-21	2808-2819	established	_	_	
14-22	2819-2820	.	_	_	

#Text=However, it should be appreciated that other methods of search can be employed including the exhaustive, sequential or breadth first or depth first search techniques.
15-1	2821-2828	However	_	_	
15-2	2828-2829	,	_	_	
15-3	2830-2832	it	_	_	
15-4	2833-2839	should	_	_	
15-5	2840-2842	be	_	_	
15-6	2843-2854	appreciated	_	_	
15-7	2855-2859	that	_	_	
15-8	2860-2865	other	_	_	
15-9	2866-2873	methods	_	_	
15-10	2874-2876	of	_	_	
15-11	2877-2883	search	_	_	
15-12	2884-2887	can	_	_	
15-13	2888-2890	be	_	_	
15-14	2891-2899	employed	_	_	
15-15	2900-2909	including	_	_	
15-16	2910-2913	the	_	_	
15-17	2914-2924	exhaustive	_	_	
15-18	2924-2925	,	_	_	
15-19	2926-2936	sequential	_	_	
15-20	2937-2939	or	_	_	
15-21	2940-2947	breadth	_	_	
15-22	2948-2953	first	_	_	
15-23	2954-2956	or	_	_	
15-24	2957-2962	depth	_	_	
15-25	2963-2968	first	_	_	
15-26	2969-2975	search	_	_	
15-27	2976-2986	techniques	_	_	
15-28	2986-2987	.	_	_	
