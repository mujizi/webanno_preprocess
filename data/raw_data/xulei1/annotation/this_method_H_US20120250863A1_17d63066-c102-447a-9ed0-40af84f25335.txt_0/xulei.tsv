#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0057] Instead of generating and distributing a traditional key, some examples may use random processes for encrypting the data at the bit level, keeping only the fingerprint or key array in memory.
1-1	0-1	[	_	_	
1-2	1-5	0057	_	_	
1-3	5-6	]	_	_	
1-4	7-14	Instead	_	_	
1-5	15-17	of	_	_	
1-6	18-28	generating	_	_	
1-7	29-32	and	_	_	
1-8	33-45	distributing	_	_	
1-9	46-47	a	_	_	
1-10	48-59	traditional	_	_	
1-11	60-63	key	_	_	
1-12	63-64	,	_	_	
1-13	65-69	some	_	_	
1-14	70-78	examples	_	_	
1-15	79-82	may	_	_	
1-16	83-86	use	_	_	
1-17	87-93	random	_	_	
1-18	94-103	processes	_	_	
1-19	104-107	for	_	_	
1-20	108-118	encrypting	_	_	
1-21	119-122	the	_	_	
1-22	123-127	data	_	_	
1-23	128-130	at	_	_	
1-24	131-134	the	_	_	
1-25	135-138	bit	_	_	
1-26	139-144	level	_	_	
1-27	144-145	,	_	_	
1-28	146-153	keeping	_	_	
1-29	154-158	only	_	_	
1-30	159-162	the	_	_	
1-31	163-174	fingerprint	_	_	
1-32	175-177	or	_	_	
1-33	178-181	key	_	_	
1-34	182-187	array	_	_	
1-35	188-190	in	_	_	
1-36	191-197	memory	_	_	
1-37	197-198	.	_	_	

#Text=Exemplary key arrays may describe several random algorithms that determine how a random process will encrypt the data.
2-1	199-208	Exemplary	_	_	
2-2	209-212	key	_	_	
2-3	213-219	arrays	_	_	
2-4	220-223	may	_	_	
2-5	224-232	describe	_	_	
2-6	233-240	several	_	_	
2-7	241-247	random	_	_	
2-8	248-258	algorithms	_	_	
2-9	259-263	that	_	_	
2-10	264-273	determine	_	_	
2-11	274-277	how	_	_	
2-12	278-279	a	_	_	
2-13	280-286	random	_	_	
2-14	287-294	process	_	_	
2-15	295-299	will	_	_	
2-16	300-307	encrypt	_	_	
2-17	308-311	the	_	_	
2-18	312-316	data	_	_	
2-19	316-317	.	_	_	

#Text=Thus, in some embodiments keys are not necessary, and the task of key generating and distributing and key-related security issues can be eliminated in some embodiments.
#Text=[0058] Each key of a key array may describe or reflect one random algorithm of data encryption using a random process.
3-1	318-322	Thus	_	_	
3-2	322-323	,	_	_	
3-3	324-326	in	_	_	
3-4	327-331	some	_	_	
3-5	332-343	embodiments	_	_	
3-6	344-348	keys	_	_	
3-7	349-352	are	_	_	
3-8	353-356	not	_	_	
3-9	357-366	necessary	_	_	
3-10	366-367	,	_	_	
3-11	368-371	and	_	_	
3-12	372-375	the	_	_	
3-13	376-380	task	_	_	
3-14	381-383	of	_	_	
3-15	384-387	key	_	_	
3-16	388-398	generating	_	_	
3-17	399-402	and	_	_	
3-18	403-415	distributing	_	_	
3-19	416-419	and	_	_	
3-20	420-431	key-related	_	_	
3-21	432-440	security	_	_	
3-22	441-447	issues	_	_	
3-23	448-451	can	_	_	
3-24	452-454	be	_	_	
3-25	455-465	eliminated	_	_	
3-26	466-468	in	_	_	
3-27	469-473	some	_	_	
3-28	474-485	embodiments	_	_	
3-29	485-486	.	_	_	
3-30	487-488	[	_	_	
3-31	488-492	0058	_	_	
3-32	492-493	]	_	_	
3-33	494-498	Each	_	_	
3-34	499-502	key	_	_	
3-35	503-505	of	_	_	
3-36	506-507	a	_	_	
3-37	508-511	key	_	_	
3-38	512-517	array	_	_	
3-39	518-521	may	_	_	
3-40	522-530	describe	_	_	
3-41	531-533	or	_	_	
3-42	534-541	reflect	_	_	
3-43	542-545	one	_	_	
3-44	546-552	random	_	_	
3-45	553-562	algorithm	_	_	
3-46	563-565	of	_	_	
3-47	566-570	data	_	_	
3-48	571-581	encryption	_	_	
3-49	582-587	using	_	_	
3-50	588-589	a	_	_	
3-51	590-596	random	_	_	
3-52	597-604	process	_	_	
3-53	604-605	.	_	_	

#Text=Accordingly, multiple lines can describe multiple different random algorithms for data encryption.
4-1	606-617	Accordingly	_	_	
4-2	617-618	,	_	_	
4-3	619-627	multiple	_	_	
4-4	628-633	lines	_	_	
4-5	634-637	can	_	_	
4-6	638-646	describe	_	_	
4-7	647-655	multiple	_	_	
4-8	656-665	different	_	_	
4-9	666-672	random	_	_	
4-10	673-683	algorithms	_	_	
4-11	684-687	for	_	_	
4-12	688-692	data	_	_	
4-13	693-703	encryption	_	_	
4-14	703-704	.	_	_	

#Text=To encrypt a data packet, a key of a key array (i.e., an algorithm) may be randomly selected, thus adding another random process.
5-1	705-707	To	_	_	
5-2	708-715	encrypt	_	_	
5-3	716-717	a	_	_	
5-4	718-722	data	_	_	
5-5	723-729	packet	_	_	
5-6	729-730	,	_	_	
5-7	731-732	a	_	_	
5-8	733-736	key	_	_	
5-9	737-739	of	_	_	
5-10	740-741	a	_	_	
5-11	742-745	key	_	_	
5-12	746-751	array	_	_	
5-13	752-753	(	_	_	
5-14	753-756	i.e	_	_	
5-15	756-757	.	_	_	
5-16	757-758	,	_	_	
5-17	759-761	an	_	_	
5-18	762-771	algorithm	_	_	
5-19	771-772	)	_	_	
5-20	773-776	may	_	_	
5-21	777-779	be	_	_	
5-22	780-788	randomly	_	_	
5-23	789-797	selected	_	_	
5-24	797-798	,	_	_	
5-25	799-803	thus	_	_	
5-26	804-810	adding	_	_	
5-27	811-818	another	_	_	
5-28	819-825	random	_	_	
5-29	826-833	process	_	_	
5-30	833-834	.	_	_	

#Text=Furthermore, in some key arrays, the key length of the keys of the key array may be reduced by increasing the number of keys in the key tables.
6-1	835-846	Furthermore	_	_	
6-2	846-847	,	_	_	
6-3	848-850	in	_	_	
6-4	851-855	some	_	_	
6-5	856-859	key	_	_	
6-6	860-866	arrays	_	_	
6-7	866-867	,	_	_	
6-8	868-871	the	_	_	
6-9	872-875	key	_	_	
6-10	876-882	length	_	_	
6-11	883-885	of	_	_	
6-12	886-889	the	_	_	
6-13	890-894	keys	_	_	
6-14	895-897	of	_	_	
6-15	898-901	the	_	_	
6-16	902-905	key	_	_	
6-17	906-911	array	_	_	
6-18	912-915	may	_	_	
6-19	916-918	be	_	_	
6-20	919-926	reduced	_	_	
6-21	927-929	by	_	_	
6-22	930-940	increasing	_	_	
6-23	941-944	the	_	_	
6-24	945-951	number	_	_	
6-25	952-954	of	_	_	
6-26	955-959	keys	_	_	
6-27	960-962	in	_	_	
6-28	963-966	the	_	_	
6-29	967-970	key	_	_	
6-30	971-977	tables	_	_	
6-31	977-978	.	_	_	

#Text=Accordingly, in these embodiments two-dimensional key table space may be saved by increasing one-dimensional indexing space or one dimensional key length space.
7-1	979-990	Accordingly	_	_	
7-2	990-991	,	_	_	
7-3	992-994	in	_	_	
7-4	995-1000	these	_	_	
7-5	1001-1012	embodiments	_	_	
7-6	1013-1028	two-dimensional	_	_	
7-7	1029-1032	key	_	_	
7-8	1033-1038	table	_	_	
7-9	1039-1044	space	_	_	
7-10	1045-1048	may	_	_	
7-11	1049-1051	be	_	_	
7-12	1052-1057	saved	_	_	
7-13	1058-1060	by	_	_	
7-14	1061-1071	increasing	_	_	
7-15	1072-1087	one-dimensional	_	_	
7-16	1088-1096	indexing	_	_	
7-17	1097-1102	space	_	_	
7-18	1103-1105	or	_	_	
7-19	1106-1109	one	_	_	
7-20	1110-1121	dimensional	_	_	
7-21	1122-1125	key	_	_	
7-22	1126-1132	length	_	_	
7-23	1133-1138	space	_	_	
7-24	1138-1139	.	_	_	

#Text=In examples where the key array lines are randomly selected, one key array can be used as many times as necessary, and may remain small.
8-1	1140-1142	In	_	_	
8-2	1143-1151	examples	_	_	
8-3	1152-1157	where	_	_	
8-4	1158-1161	the	_	_	
8-5	1162-1165	key	_	_	
8-6	1166-1171	array	_	_	
8-7	1172-1177	lines	_	_	
8-8	1178-1181	are	_	_	
8-9	1182-1190	randomly	_	_	
8-10	1191-1199	selected	_	_	
8-11	1199-1200	,	_	_	
8-12	1201-1204	one	_	_	
8-13	1205-1208	key	_	_	
8-14	1209-1214	array	_	_	
8-15	1215-1218	can	_	_	
8-16	1219-1221	be	_	_	
8-17	1222-1226	used	_	_	
8-18	1227-1229	as	_	_	
8-19	1230-1234	many	_	_	
8-20	1235-1240	times	_	_	
8-21	1241-1243	as	_	_	
8-22	1244-1253	necessary	_	_	
8-23	1253-1254	,	_	_	
8-24	1255-1258	and	_	_	
8-25	1259-1262	may	_	_	
8-26	1263-1269	remain	_	_	
8-27	1270-1275	small	_	_	
8-28	1275-1276	.	_	_	

#Text=For example, a 100-byte key array can be created that provides security that at least exceeds security requirements of Cryptographic Modules (FIPS 140-2, 140-3) by a factor of 268.
9-1	1277-1280	For	_	_	
9-2	1281-1288	example	_	_	
9-3	1288-1289	,	_	_	
9-4	1290-1291	a	_	_	
9-5	1292-1295	100	_	_	
9-6	1295-1296	-	_	_	
9-7	1296-1300	byte	_	_	
9-8	1301-1304	key	_	_	
9-9	1305-1310	array	_	_	
9-10	1311-1314	can	_	_	
9-11	1315-1317	be	_	_	
9-12	1318-1325	created	_	_	
9-13	1326-1330	that	_	_	
9-14	1331-1339	provides	_	_	
9-15	1340-1348	security	_	_	
9-16	1349-1353	that	_	_	
9-17	1354-1356	at	_	_	
9-18	1357-1362	least	_	_	
9-19	1363-1370	exceeds	_	_	
9-20	1371-1379	security	_	_	
9-21	1380-1392	requirements	_	_	
9-22	1393-1395	of	_	_	
9-23	1396-1409	Cryptographic	_	_	
9-24	1410-1417	Modules	_	_	
9-25	1418-1419	(	_	_	
9-26	1419-1423	FIPS	_	_	
9-27	1424-1427	140	_	_	
9-28	1427-1428	-	_	_	
9-29	1428-1429	2	_	_	
9-30	1429-1430	,	_	_	
9-31	1431-1434	140	_	_	
9-32	1434-1435	-	_	_	
9-33	1435-1436	3	_	_	
9-34	1436-1437	)	_	_	
9-35	1438-1440	by	_	_	
9-36	1441-1442	a	_	_	
9-37	1443-1449	factor	_	_	
9-38	1450-1452	of	_	_	
9-39	1453-1456	268	_	_	
9-40	1456-1457	.	_	_	

#Text=Moreover, each bit of randomly generated information located in the key array may be used several times during the same encrypting process.
10-1	1458-1466	Moreover	_	_	
10-2	1466-1467	,	_	_	
10-3	1468-1472	each	_	_	
10-4	1473-1476	bit	_	_	
10-5	1477-1479	of	_	_	
10-6	1480-1488	randomly	_	_	
10-7	1489-1498	generated	_	_	
10-8	1499-1510	information	_	_	
10-9	1511-1518	located	_	_	
10-10	1519-1521	in	_	_	
10-11	1522-1525	the	_	_	
10-12	1526-1529	key	_	_	
10-13	1530-1535	array	_	_	
10-14	1536-1539	may	_	_	
10-15	1540-1542	be	_	_	
10-16	1543-1547	used	_	_	
10-17	1548-1555	several	_	_	
10-18	1556-1561	times	_	_	
10-19	1562-1568	during	_	_	
10-20	1569-1572	the	_	_	
10-21	1573-1577	same	_	_	
10-22	1578-1588	encrypting	_	_	
10-23	1589-1596	process	_	_	
10-24	1596-1597	.	_	_	

#Text=This allows further reduction in the key array size without a security penalty.
#Text=[0059] In some embodiments, the key tables may be updated or modified as communications progress.
11-1	1598-1602	This	_	_	
11-2	1603-1609	allows	_	_	
11-3	1610-1617	further	_	_	
11-4	1618-1627	reduction	_	_	
11-5	1628-1630	in	_	_	
11-6	1631-1634	the	_	_	
11-7	1635-1638	key	_	_	
11-8	1639-1644	array	_	_	
11-9	1645-1649	size	_	_	
11-10	1650-1657	without	_	_	
11-11	1658-1659	a	_	_	
11-12	1660-1668	security	_	_	
11-13	1669-1676	penalty	_	_	
11-14	1676-1677	.	_	_	
11-15	1678-1679	[	_	_	
11-16	1679-1683	0059	_	_	
11-17	1683-1684	]	_	_	
11-18	1685-1687	In	_	_	
11-19	1688-1692	some	_	_	
11-20	1693-1704	embodiments	_	_	
11-21	1704-1705	,	_	_	
11-22	1706-1709	the	_	_	
11-23	1710-1713	key	_	_	
11-24	1714-1720	tables	_	_	
11-25	1721-1724	may	_	_	
11-26	1725-1727	be	_	_	
11-27	1728-1735	updated	_	_	
11-28	1736-1738	or	_	_	
11-29	1739-1747	modified	_	_	
11-30	1748-1750	as	_	_	
11-31	1751-1765	communications	_	_	
11-32	1766-1774	progress	_	_	
11-33	1774-1775	.	_	_	

#Text=In one embodiment, a method for updating the key table comprises adding a key's index to the key each time the key is used.
12-1	1776-1778	In	_	_	
12-2	1779-1782	one	_	_	
12-3	1783-1793	embodiment	_	_	
12-4	1793-1794	,	_	_	
12-5	1795-1796	a	*[1]	22-6[2_1]	
12-6	1797-1803	method	*[1]	_	
12-7	1804-1807	for	*[1]	_	
12-8	1808-1816	updating	*[1]	_	
12-9	1817-1820	the	*[1]	_	
12-10	1821-1824	key	*[1]	_	
12-11	1825-1830	table	*[1]	_	
12-12	1831-1840	comprises	*[1]	_	
12-13	1841-1847	adding	*[1]	_	
12-14	1848-1849	a	*[1]	_	
12-15	1850-1855	key's	*[1]	_	
12-16	1856-1861	index	*[1]	_	
12-17	1862-1864	to	*[1]	_	
12-18	1865-1868	the	*[1]	_	
12-19	1869-1872	key	*[1]	_	
12-20	1873-1877	each	*[1]	_	
12-21	1878-1882	time	*[1]	_	
12-22	1883-1886	the	*[1]	_	
12-23	1887-1890	key	*[1]	_	
12-24	1891-1893	is	*[1]	_	
12-25	1894-1898	used	*[1]	_	
12-26	1898-1899	.	_	_	

#Text=In this embodiment, this process is performed by the transmitter and receiver such that key table symmetry is maintained.
13-1	1900-1902	In	_	_	
13-2	1903-1907	this	_	_	
13-3	1908-1918	embodiment	_	_	
13-4	1918-1919	,	_	_	
13-5	1920-1924	this	_	_	
13-6	1925-1932	process	_	_	
13-7	1933-1935	is	_	_	
13-8	1936-1945	performed	_	_	
13-9	1946-1948	by	_	_	
13-10	1949-1952	the	_	_	
13-11	1953-1964	transmitter	_	_	
13-12	1965-1968	and	_	_	
13-13	1969-1977	receiver	_	_	
13-14	1978-1982	such	_	_	
13-15	1983-1987	that	_	_	
13-16	1988-1991	key	_	_	
13-17	1992-1997	table	_	_	
13-18	1998-2006	symmetry	_	_	
13-19	2007-2009	is	_	_	
13-20	2010-2020	maintained	_	_	
13-21	2020-2021	.	_	_	

#Text=In other embodiments, other such methods may be employed.
14-1	2022-2024	In	_	_	
14-2	2025-2030	other	_	_	
14-3	2031-2042	embodiments	_	_	
14-4	2042-2043	,	_	_	
14-5	2044-2049	other	_	_	
14-6	2050-2054	such	_	_	
14-7	2055-2062	methods	_	_	
14-8	2063-2066	may	_	_	
14-9	2067-2069	be	_	_	
14-10	2070-2078	employed	_	_	
14-11	2078-2079	.	_	_	

#Text=For example, in one embodiment, a single indexed key is used for each packet in a packet based communications system.
15-1	2080-2083	For	_	_	
15-2	2084-2091	example	_	_	
15-3	2091-2092	,	_	_	
15-4	2093-2095	in	_	_	
15-5	2096-2099	one	_	_	
15-6	2100-2110	embodiment	_	_	
15-7	2110-2111	,	_	_	
15-8	2112-2113	a	_	_	
15-9	2114-2120	single	_	_	
15-10	2121-2128	indexed	_	_	
15-11	2129-2132	key	_	_	
15-12	2133-2135	is	_	_	
15-13	2136-2140	used	_	_	
15-14	2141-2144	for	_	_	
15-15	2145-2149	each	_	_	
15-16	2150-2156	packet	_	_	
15-17	2157-2159	in	_	_	
15-18	2160-2161	a	_	_	
15-19	2162-2168	packet	_	_	
15-20	2169-2174	based	_	_	
15-21	2175-2189	communications	_	_	
15-22	2190-2196	system	_	_	
15-23	2196-2197	.	_	_	

#Text=In this embodiment, the key used for the packet may be updated by various modifications after the encryption process.
16-1	2198-2200	In	_	_	
16-2	2201-2205	this	_	_	
16-3	2206-2216	embodiment	_	_	
16-4	2216-2217	,	_	_	
16-5	2218-2221	the	_	_	
16-6	2222-2225	key	_	_	
16-7	2226-2230	used	_	_	
16-8	2231-2234	for	_	_	
16-9	2235-2238	the	_	_	
16-10	2239-2245	packet	_	_	
16-11	2246-2249	may	_	_	
16-12	2250-2252	be	_	_	
16-13	2253-2260	updated	_	_	
16-14	2261-2263	by	_	_	
16-15	2264-2271	various	_	_	
16-16	2272-2285	modifications	_	_	
16-17	2286-2291	after	_	_	
16-18	2292-2295	the	_	_	
16-19	2296-2306	encryption	_	_	
16-20	2307-2314	process	_	_	
16-21	2314-2315	.	_	_	

#Text=This might comprise adding the MAC or random nonce used in the packet to the key after encryption (and decryption, for symmetry).
17-1	2316-2320	This	_	_	
17-2	2321-2326	might	_	_	
17-3	2327-2335	comprise	_	_	
17-4	2336-2342	adding	_	_	
17-5	2343-2346	the	_	_	
17-6	2347-2350	MAC	_	_	
17-7	2351-2353	or	_	_	
17-8	2354-2360	random	_	_	
17-9	2361-2366	nonce	_	_	
17-10	2367-2371	used	_	_	
17-11	2372-2374	in	_	_	
17-12	2375-2378	the	_	_	
17-13	2379-2385	packet	_	_	
17-14	2386-2388	to	_	_	
17-15	2389-2392	the	_	_	
17-16	2393-2396	key	_	_	
17-17	2397-2402	after	_	_	
17-18	2403-2413	encryption	_	_	
17-19	2414-2415	(	_	_	
17-20	2415-2418	and	_	_	
17-21	2419-2429	decryption	_	_	
17-22	2429-2430	,	_	_	
17-23	2431-2434	for	_	_	
17-24	2435-2443	symmetry	_	_	
17-25	2443-2444	)	_	_	
17-26	2444-2445	.	_	_	

#Text=In other cases, this might comprise using these pieces of data for various permutation operations.
18-1	2446-2448	In	_	_	
18-2	2449-2454	other	_	_	
18-3	2455-2460	cases	_	_	
18-4	2460-2461	,	_	_	
18-5	2462-2466	this	_	_	
18-6	2467-2472	might	_	_	
18-7	2473-2481	comprise	_	_	
18-8	2482-2487	using	_	_	
18-9	2488-2493	these	_	_	
18-10	2494-2500	pieces	_	_	
18-11	2501-2503	of	_	_	
18-12	2504-2508	data	_	_	
18-13	2509-2512	for	_	_	
18-14	2513-2520	various	_	_	
18-15	2521-2532	permutation	_	_	
18-16	2533-2543	operations	_	_	
18-17	2543-2544	.	_	_	

#Text=For example, the MAC or random nonce might be used for permuting keys within the key table, or might be used for permuting the key used for the message containing the MAC or random nonce.
19-1	2545-2548	For	_	_	
19-2	2549-2556	example	_	_	
19-3	2556-2557	,	_	_	
19-4	2558-2561	the	_	_	
19-5	2562-2565	MAC	_	_	
19-6	2566-2568	or	_	_	
19-7	2569-2575	random	_	_	
19-8	2576-2581	nonce	_	_	
19-9	2582-2587	might	_	_	
19-10	2588-2590	be	_	_	
19-11	2591-2595	used	_	_	
19-12	2596-2599	for	_	_	
19-13	2600-2609	permuting	_	_	
19-14	2610-2614	keys	_	_	
19-15	2615-2621	within	_	_	
19-16	2622-2625	the	_	_	
19-17	2626-2629	key	_	_	
19-18	2630-2635	table	_	_	
19-19	2635-2636	,	_	_	
19-20	2637-2639	or	_	_	
19-21	2640-2645	might	_	_	
19-22	2646-2648	be	_	_	
19-23	2649-2653	used	_	_	
19-24	2654-2657	for	_	_	
19-25	2658-2667	permuting	_	_	
19-26	2668-2671	the	_	_	
19-27	2672-2675	key	_	_	
19-28	2676-2680	used	_	_	
19-29	2681-2684	for	_	_	
19-30	2685-2688	the	_	_	
19-31	2689-2696	message	_	_	
19-32	2697-2707	containing	_	_	
19-33	2708-2711	the	_	_	
19-34	2712-2715	MAC	_	_	
19-35	2716-2718	or	_	_	
19-36	2719-2725	random	_	_	
19-37	2726-2731	nonce	_	_	
19-38	2731-2732	.	_	_	

#Text=In other embodiments, similar processes might be used for updating the entire key table.
20-1	2733-2735	In	_	_	
20-2	2736-2741	other	_	_	
20-3	2742-2753	embodiments	_	_	
20-4	2753-2754	,	_	_	
20-5	2755-2762	similar	_	_	
20-6	2763-2772	processes	_	_	
20-7	2773-2778	might	_	_	
20-8	2779-2781	be	_	_	
20-9	2782-2786	used	_	_	
20-10	2787-2790	for	_	_	
20-11	2791-2799	updating	_	_	
20-12	2800-2803	the	_	_	
20-13	2804-2810	entire	_	_	
20-14	2811-2814	key	_	_	
20-15	2815-2820	table	_	_	
20-16	2820-2821	.	_	_	

#Text=For example, a specific cipher text or predetermined portion of a specific cipher text might be added to each key of a key table to generate a new updated key table.
21-1	2822-2825	For	_	_	
21-2	2826-2833	example	_	_	
21-3	2833-2834	,	_	_	
21-4	2835-2836	a	_	_	
21-5	2837-2845	specific	_	_	
21-6	2846-2852	cipher	_	_	
21-7	2853-2857	text	_	_	
21-8	2858-2860	or	_	_	
21-9	2861-2874	predetermined	_	_	
21-10	2875-2882	portion	_	_	
21-11	2883-2885	of	_	_	
21-12	2886-2887	a	_	_	
21-13	2888-2896	specific	_	_	
21-14	2897-2903	cipher	_	_	
21-15	2904-2908	text	_	_	
21-16	2909-2914	might	_	_	
21-17	2915-2917	be	_	_	
21-18	2918-2923	added	_	_	
21-19	2924-2926	to	_	_	
21-20	2927-2931	each	_	_	
21-21	2932-2935	key	_	_	
21-22	2936-2938	of	_	_	
21-23	2939-2940	a	_	_	
21-24	2941-2944	key	_	_	
21-25	2945-2950	table	_	_	
21-26	2951-2953	to	_	_	
21-27	2954-2962	generate	_	_	
21-28	2963-2964	a	_	_	
21-29	2965-2968	new	_	_	
21-30	2969-2976	updated	_	_	
21-31	2977-2980	key	_	_	
21-32	2981-2986	table	_	_	
21-33	2986-2987	.	_	_	

#Text=In a particular embodiment, this method of generating an updated key table might be employed if key table distribution process in unavailable.
22-1	2988-2990	In	_	_	
22-2	2991-2992	a	_	_	
22-3	2993-3003	particular	_	_	
22-4	3004-3014	embodiment	_	_	
22-5	3014-3015	,	_	_	
22-6	3016-3020	this	*[2]	_	
22-7	3021-3027	method	*[2]	_	
22-8	3028-3030	of	_	_	
22-9	3031-3041	generating	_	_	
22-10	3042-3044	an	_	_	
22-11	3045-3052	updated	_	_	
22-12	3053-3056	key	_	_	
22-13	3057-3062	table	_	_	
22-14	3063-3068	might	_	_	
22-15	3069-3071	be	_	_	
22-16	3072-3080	employed	_	_	
22-17	3081-3083	if	_	_	
22-18	3084-3087	key	_	_	
22-19	3088-3093	table	_	_	
22-20	3094-3106	distribution	_	_	
22-21	3107-3114	process	_	_	
22-22	3115-3117	in	_	_	
22-23	3118-3129	unavailable	_	_	
22-24	3129-3130	.	_	_	

#Text=For example, a specific system deployment might be configured such that if a key distribution process is not initiated at a pre-specified time, then the system utilizes a cipher text sent after a predetermined number of messages or at a second pre-specified time to update the key table.
#Text=[0060] FIGS. 5A and 5B illustrate a simplified example bit-inserting encrypting algorithm in accordance with one embodiment of the invention.
23-1	3131-3134	For	_	_	
23-2	3135-3142	example	_	_	
23-3	3142-3143	,	_	_	
23-4	3144-3145	a	_	_	
23-5	3146-3154	specific	_	_	
23-6	3155-3161	system	_	_	
23-7	3162-3172	deployment	_	_	
23-8	3173-3178	might	_	_	
23-9	3179-3181	be	_	_	
23-10	3182-3192	configured	_	_	
23-11	3193-3197	such	_	_	
23-12	3198-3202	that	_	_	
23-13	3203-3205	if	_	_	
23-14	3206-3207	a	_	_	
23-15	3208-3211	key	_	_	
23-16	3212-3224	distribution	_	_	
23-17	3225-3232	process	_	_	
23-18	3233-3235	is	_	_	
23-19	3236-3239	not	_	_	
23-20	3240-3249	initiated	_	_	
23-21	3250-3252	at	_	_	
23-22	3253-3254	a	_	_	
23-23	3255-3268	pre-specified	_	_	
23-24	3269-3273	time	_	_	
23-25	3273-3274	,	_	_	
23-26	3275-3279	then	_	_	
23-27	3280-3283	the	_	_	
23-28	3284-3290	system	_	_	
23-29	3291-3299	utilizes	_	_	
23-30	3300-3301	a	_	_	
23-31	3302-3308	cipher	_	_	
23-32	3309-3313	text	_	_	
23-33	3314-3318	sent	_	_	
23-34	3319-3324	after	_	_	
23-35	3325-3326	a	_	_	
23-36	3327-3340	predetermined	_	_	
23-37	3341-3347	number	_	_	
23-38	3348-3350	of	_	_	
23-39	3351-3359	messages	_	_	
23-40	3360-3362	or	_	_	
23-41	3363-3365	at	_	_	
23-42	3366-3367	a	_	_	
23-43	3368-3374	second	_	_	
23-44	3375-3388	pre-specified	_	_	
23-45	3389-3393	time	_	_	
23-46	3394-3396	to	_	_	
23-47	3397-3403	update	_	_	
23-48	3404-3407	the	_	_	
23-49	3408-3411	key	_	_	
23-50	3412-3417	table	_	_	
23-51	3417-3418	.	_	_	
23-52	3419-3420	[	_	_	
23-53	3420-3424	0060	_	_	
23-54	3424-3425	]	_	_	
23-55	3426-3430	FIGS	_	_	
23-56	3430-3431	.	_	_	
23-57	3432-3434	5A	_	_	
23-58	3435-3438	and	_	_	
23-59	3439-3441	5B	_	_	
23-60	3442-3452	illustrate	_	_	
23-61	3453-3454	a	_	_	
23-62	3455-3465	simplified	_	_	
23-63	3466-3473	example	_	_	
23-64	3474-3487	bit-inserting	_	_	
23-65	3488-3498	encrypting	_	_	
23-66	3499-3508	algorithm	_	_	
23-67	3509-3511	in	_	_	
23-68	3512-3522	accordance	_	_	
23-69	3523-3527	with	_	_	
23-70	3528-3531	one	_	_	
23-71	3532-3542	embodiment	_	_	
23-72	3543-3545	of	_	_	
23-73	3546-3549	the	_	_	
23-74	3550-3559	invention	_	_	
23-75	3559-3560	.	_	_	

#Text=In this example, three random processes are mixed with incoming data.
24-1	3561-3563	In	_	_	
24-2	3564-3568	this	_	_	
24-3	3569-3576	example	_	_	
24-4	3576-3577	,	_	_	
24-5	3578-3583	three	_	_	
24-6	3584-3590	random	_	_	
24-7	3591-3600	processes	_	_	
24-8	3601-3604	are	_	_	
24-9	3605-3610	mixed	_	_	
24-10	3611-3615	with	_	_	
24-11	3616-3624	incoming	_	_	
24-12	3625-3629	data	_	_	
24-13	3629-3630	.	_	_	

#Text=Ideally, the random processes are truly random processes, although pseudorandom processes can be used.
25-1	3631-3638	Ideally	_	_	
25-2	3638-3639	,	_	_	
25-3	3640-3643	the	_	_	
25-4	3644-3650	random	_	_	
25-5	3651-3660	processes	_	_	
25-6	3661-3664	are	_	_	
25-7	3665-3670	truly	_	_	
25-8	3671-3677	random	_	_	
25-9	3678-3687	processes	_	_	
25-10	3687-3688	,	_	_	
25-11	3689-3697	although	_	_	
25-12	3698-3710	pseudorandom	_	_	
25-13	3711-3720	processes	_	_	
25-14	3721-3724	can	_	_	
25-15	3725-3727	be	_	_	
25-16	3728-3732	used	_	_	
25-17	3732-3733	.	_	_	

#Text=A multiplexer 211 or the like is provided to combine the plaintext data bits 203 with the randomly generated data bits 204 to create an encrypted bit stream 210.
26-1	3734-3735	A	_	_	
26-2	3736-3747	multiplexer	_	_	
26-3	3748-3751	211	_	_	
26-4	3752-3754	or	_	_	
26-5	3755-3758	the	_	_	
26-6	3759-3763	like	_	_	
26-7	3764-3766	is	_	_	
26-8	3767-3775	provided	_	_	
26-9	3776-3778	to	_	_	
26-10	3779-3786	combine	_	_	
26-11	3787-3790	the	_	_	
26-12	3791-3800	plaintext	_	_	
26-13	3801-3805	data	_	_	
26-14	3806-3810	bits	_	_	
26-15	3811-3814	203	_	_	
26-16	3815-3819	with	_	_	
26-17	3820-3823	the	_	_	
26-18	3824-3832	randomly	_	_	
26-19	3833-3842	generated	_	_	
26-20	3843-3847	data	_	_	
26-21	3848-3852	bits	_	_	
26-22	3853-3856	204	_	_	
26-23	3857-3859	to	_	_	
26-24	3860-3866	create	_	_	
26-25	3867-3869	an	_	_	
26-26	3870-3879	encrypted	_	_	
26-27	3880-3883	bit	_	_	
26-28	3884-3890	stream	_	_	
26-29	3891-3894	210	_	_	
26-30	3894-3895	.	_	_	

#Text=In one embodiment, the multiplexer 211 is a true multiplexer that simply multiplexes individual input streams into a combined output.
27-1	3896-3898	In	_	_	
27-2	3899-3902	one	_	_	
27-3	3903-3913	embodiment	_	_	
27-4	3913-3914	,	_	_	
27-5	3915-3918	the	_	_	
27-6	3919-3930	multiplexer	_	_	
27-7	3931-3934	211	_	_	
27-8	3935-3937	is	_	_	
27-9	3938-3939	a	_	_	
27-10	3940-3944	true	_	_	
27-11	3945-3956	multiplexer	_	_	
27-12	3957-3961	that	_	_	
27-13	3962-3968	simply	_	_	
27-14	3969-3980	multiplexes	_	_	
27-15	3981-3991	individual	_	_	
27-16	3992-3997	input	_	_	
27-17	3998-4005	streams	_	_	
27-18	4006-4010	into	_	_	
27-19	4011-4012	a	_	_	
27-20	4013-4021	combined	_	_	
27-21	4022-4028	output	_	_	
27-22	4028-4029	.	_	_	

#Text=Accordingly, the input data stream is still present in the encrypted output in its original order, but there are other data bits inserted in the data stream so that the input data stream is not in consecutive order.
#Text=[0061] The random data generator G2 generates random bits (0's and 1's for binary data streams), that are input to one input of the multiplexer 211.
28-1	4030-4041	Accordingly	_	_	
28-2	4041-4042	,	_	_	
28-3	4043-4046	the	_	_	
28-4	4047-4052	input	_	_	
28-5	4053-4057	data	_	_	
28-6	4058-4064	stream	_	_	
28-7	4065-4067	is	_	_	
28-8	4068-4073	still	_	_	
28-9	4074-4081	present	_	_	
28-10	4082-4084	in	_	_	
28-11	4085-4088	the	_	_	
28-12	4089-4098	encrypted	_	_	
28-13	4099-4105	output	_	_	
28-14	4106-4108	in	_	_	
28-15	4109-4112	its	_	_	
28-16	4113-4121	original	_	_	
28-17	4122-4127	order	_	_	
28-18	4127-4128	,	_	_	
28-19	4129-4132	but	_	_	
28-20	4133-4138	there	_	_	
28-21	4139-4142	are	_	_	
28-22	4143-4148	other	_	_	
28-23	4149-4153	data	_	_	
28-24	4154-4158	bits	_	_	
28-25	4159-4167	inserted	_	_	
28-26	4168-4170	in	_	_	
28-27	4171-4174	the	_	_	
28-28	4175-4179	data	_	_	
28-29	4180-4186	stream	_	_	
28-30	4187-4189	so	_	_	
28-31	4190-4194	that	_	_	
28-32	4195-4198	the	_	_	
28-33	4199-4204	input	_	_	
28-34	4205-4209	data	_	_	
28-35	4210-4216	stream	_	_	
28-36	4217-4219	is	_	_	
28-37	4220-4223	not	_	_	
28-38	4224-4226	in	_	_	
28-39	4227-4238	consecutive	_	_	
28-40	4239-4244	order	_	_	
28-41	4244-4245	.	_	_	
28-42	4246-4247	[	_	_	
28-43	4247-4251	0061	_	_	
28-44	4251-4252	]	_	_	
28-45	4253-4256	The	_	_	
28-46	4257-4263	random	_	_	
28-47	4264-4268	data	_	_	
28-48	4269-4278	generator	_	_	
28-49	4279-4281	G2	_	_	
28-50	4282-4291	generates	_	_	
28-51	4292-4298	random	_	_	
28-52	4299-4303	bits	_	_	
28-53	4304-4305	(	_	_	
28-54	4305-4306	0	_	_	
28-55	4306-4307	'	_	_	
28-56	4307-4308	s	_	_	
28-57	4309-4312	and	_	_	
28-58	4313-4314	1	_	_	
28-59	4314-4315	'	_	_	
28-60	4315-4316	s	_	_	
28-61	4317-4320	for	_	_	
28-62	4321-4327	binary	_	_	
28-63	4328-4332	data	_	_	
28-64	4333-4340	streams	_	_	
28-65	4340-4341	)	_	_	
28-66	4341-4342	,	_	_	
28-67	4343-4347	that	_	_	
28-68	4348-4351	are	_	_	
28-69	4352-4357	input	_	_	
28-70	4358-4360	to	_	_	
28-71	4361-4364	one	_	_	
28-72	4365-4370	input	_	_	
28-73	4371-4373	of	_	_	
28-74	4374-4377	the	_	_	
28-75	4378-4389	multiplexer	_	_	
28-76	4390-4393	211	_	_	
28-77	4393-4394	.	_	_	

#Text=The random generator G1 generates random numbers to form an index 214 referring to an indexed key of the key array stored on the memory 212.
29-1	4395-4398	The	_	_	
29-2	4399-4405	random	_	_	
29-3	4406-4415	generator	_	_	
29-4	4416-4418	G1	_	_	
29-5	4419-4428	generates	_	_	
29-6	4429-4435	random	_	_	
29-7	4436-4443	numbers	_	_	
29-8	4444-4446	to	_	_	
29-9	4447-4451	form	_	_	
29-10	4452-4454	an	_	_	
29-11	4455-4460	index	_	_	
29-12	4461-4464	214	_	_	
29-13	4465-4474	referring	_	_	
29-14	4475-4477	to	_	_	
29-15	4478-4480	an	_	_	
29-16	4481-4488	indexed	_	_	
29-17	4489-4492	key	_	_	
29-18	4493-4495	of	_	_	
29-19	4496-4499	the	_	_	
29-20	4500-4503	key	_	_	
29-21	4504-4509	array	_	_	
29-22	4510-4516	stored	_	_	
29-23	4517-4519	on	_	_	
29-24	4520-4523	the	_	_	
29-25	4524-4530	memory	_	_	
29-26	4531-4534	212	_	_	
29-27	4534-4535	.	_	_	

#Text=In one embodiment, the random number generator G1 generates binary numbers from 1 to N, where N is the index of the last key of the key array.
30-1	4536-4538	In	_	_	
30-2	4539-4542	one	_	_	
30-3	4543-4553	embodiment	_	_	
30-4	4553-4554	,	_	_	
30-5	4555-4558	the	_	_	
30-6	4559-4565	random	_	_	
30-7	4566-4572	number	_	_	
30-8	4573-4582	generator	_	_	
30-9	4583-4585	G1	_	_	
30-10	4586-4595	generates	_	_	
30-11	4596-4602	binary	_	_	
30-12	4603-4610	numbers	_	_	
30-13	4611-4615	from	_	_	
30-14	4616-4617	1	_	_	
30-15	4618-4620	to	_	_	
30-16	4621-4622	N	_	_	
30-17	4622-4623	,	_	_	
30-18	4624-4629	where	_	_	
30-19	4630-4631	N	_	_	
30-20	4632-4634	is	_	_	
30-21	4635-4638	the	_	_	
30-22	4639-4644	index	_	_	
30-23	4645-4647	of	_	_	
30-24	4648-4651	the	_	_	
30-25	4652-4656	last	_	_	
30-26	4657-4660	key	_	_	
30-27	4661-4663	of	_	_	
30-28	4664-4667	the	_	_	
30-29	4668-4671	key	_	_	
30-30	4672-4677	array	_	_	
30-31	4677-4678	.	_	_	

#Text=Accordingly, random generator G1 randomly selects the first key of the key array that is used in the encryption process.
31-1	4679-4690	Accordingly	_	_	
31-2	4690-4691	,	_	_	
31-3	4692-4698	random	_	_	
31-4	4699-4708	generator	_	_	
31-5	4709-4711	G1	_	_	
31-6	4712-4720	randomly	_	_	
31-7	4721-4728	selects	_	_	
31-8	4729-4732	the	_	_	
31-9	4733-4738	first	_	_	
31-10	4739-4742	key	_	_	
31-11	4743-4745	of	_	_	
31-12	4746-4749	the	_	_	
31-13	4750-4753	key	_	_	
31-14	4754-4759	array	_	_	
31-15	4760-4764	that	_	_	
31-16	4765-4767	is	_	_	
31-17	4768-4772	used	_	_	
31-18	4773-4775	in	_	_	
31-19	4776-4779	the	_	_	
31-20	4780-4790	encryption	_	_	
31-21	4791-4798	process	_	_	
31-22	4798-4799	.	_	_	
