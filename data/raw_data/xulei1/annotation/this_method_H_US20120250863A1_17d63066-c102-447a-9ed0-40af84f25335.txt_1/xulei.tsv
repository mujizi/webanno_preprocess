#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0067] In the illustrated example, the secure shell 420 also has added security features.
1-1	0-1	[	_	_	
1-2	1-5	0067	_	_	
1-3	5-6	]	_	_	
1-4	7-9	In	_	_	
1-5	10-13	the	_	_	
1-6	14-25	illustrated	_	_	
1-7	26-33	example	_	_	
1-8	33-34	,	_	_	
1-9	35-38	the	_	_	
1-10	39-45	secure	_	_	
1-11	46-51	shell	_	_	
1-12	52-55	420	_	_	
1-13	56-60	also	_	_	
1-14	61-64	has	_	_	
1-15	65-70	added	_	_	
1-16	71-79	security	_	_	
1-17	80-88	features	_	_	
1-18	88-89	.	_	_	

#Text=For example, the header is made of random size to include the desired supporting information.
2-1	90-93	For	_	_	
2-2	94-101	example	_	_	
2-3	101-102	,	_	_	
2-4	103-106	the	_	_	
2-5	107-113	header	_	_	
2-6	114-116	is	_	_	
2-7	117-121	made	_	_	
2-8	122-124	of	_	_	
2-9	125-131	random	_	_	
2-10	132-136	size	_	_	
2-11	137-139	to	_	_	
2-12	140-147	include	_	_	
2-13	148-151	the	_	_	
2-14	152-159	desired	_	_	
2-15	160-170	supporting	_	_	
2-16	171-182	information	_	_	
2-17	182-183	.	_	_	

#Text=A random length neighbor timestamp 422 is provided as well as a random size tail 426 and Transport-Start-Key-Index (TSKI) 424.
3-1	184-185	A	_	_	
3-2	186-192	random	_	_	
3-3	193-199	length	_	_	
3-4	200-208	neighbor	_	_	
3-5	209-218	timestamp	_	_	
3-6	219-222	422	_	_	
3-7	223-225	is	_	_	
3-8	226-234	provided	_	_	
3-9	235-237	as	_	_	
3-10	238-242	well	_	_	
3-11	243-245	as	_	_	
3-12	246-247	a	_	_	
3-13	248-254	random	_	_	
3-14	255-259	size	_	_	
3-15	260-264	tail	_	_	
3-16	265-268	426	_	_	
3-17	269-272	and	_	_	
3-18	273-298	Transport-Start-Key-Index	_	_	
3-19	299-300	(	_	_	
3-20	300-304	TSKI	_	_	
3-21	304-305	)	_	_	
3-22	306-309	424	_	_	
3-23	309-310	.	_	_	

#Text=Supporting information 428 can also be included for destination address, purpose, parameters or other information, and can be of random size.
4-1	311-321	Supporting	_	_	
4-2	322-333	information	_	_	
4-3	334-337	428	_	_	
4-4	338-341	can	_	_	
4-5	342-346	also	_	_	
4-6	347-349	be	_	_	
4-7	350-358	included	_	_	
4-8	359-362	for	_	_	
4-9	363-374	destination	_	_	
4-10	375-382	address	_	_	
4-11	382-383	,	_	_	
4-12	384-391	purpose	_	_	
4-13	391-392	,	_	_	
4-14	393-403	parameters	_	_	
4-15	404-406	or	_	_	
4-16	407-412	other	_	_	
4-17	413-424	information	_	_	
4-18	424-425	,	_	_	
4-19	426-429	and	_	_	
4-20	430-433	can	_	_	
4-21	434-436	be	_	_	
4-22	437-439	of	_	_	
4-23	440-446	random	_	_	
4-24	447-451	size	_	_	
4-25	451-452	.	_	_	

#Text=Checksums 430 can be used as a check for the shell items.
#Text=[0068] Features of the exemplary packet shown in FIG. 9 enable a security and cyber attack detection.
5-1	453-462	Checksums	_	_	
5-2	463-466	430	_	_	
5-3	467-470	can	_	_	
5-4	471-473	be	_	_	
5-5	474-478	used	_	_	
5-6	479-481	as	_	_	
5-7	482-483	a	_	_	
5-8	484-489	check	_	_	
5-9	490-493	for	_	_	
5-10	494-497	the	_	_	
5-11	498-503	shell	_	_	
5-12	504-509	items	_	_	
5-13	509-510	.	_	_	
5-14	511-512	[	_	_	
5-15	512-516	0068	_	_	
5-16	516-517	]	_	_	
5-17	518-526	Features	_	_	
5-18	527-529	of	_	_	
5-19	530-533	the	_	_	
5-20	534-543	exemplary	_	_	
5-21	544-550	packet	_	_	
5-22	551-556	shown	_	_	
5-23	557-559	in	_	_	
5-24	560-563	FIG	_	_	
5-25	563-564	.	_	_	
5-26	565-566	9	_	_	
5-27	567-573	enable	_	_	
5-28	574-575	a	_	_	
5-29	576-584	security	_	_	
5-30	585-588	and	_	_	
5-31	589-594	cyber	_	_	
5-32	595-601	attack	_	_	
5-33	602-611	detection	_	_	
5-34	611-612	.	_	_	

#Text=For example, the wrong timestamp indicates a replay or spoofing attack; the same SKI in several packets indicates a replay attack, and so on.
6-1	613-616	For	_	_	
6-2	617-624	example	_	_	
6-3	624-625	,	_	_	
6-4	626-629	the	_	_	
6-5	630-635	wrong	_	_	
6-6	636-645	timestamp	_	_	
6-7	646-655	indicates	_	_	
6-8	656-657	a	_	_	
6-9	658-664	replay	_	_	
6-10	665-667	or	_	_	
6-11	668-676	spoofing	_	_	
6-12	677-683	attack	_	_	
6-13	683-684	;	_	_	
6-14	685-688	the	_	_	
6-15	689-693	same	_	_	
6-16	694-697	SKI	_	_	
6-17	698-700	in	_	_	
6-18	701-708	several	_	_	
6-19	709-716	packets	_	_	
6-20	717-726	indicates	_	_	
6-21	727-728	a	_	_	
6-22	729-735	replay	_	_	
6-23	736-742	attack	_	_	
6-24	742-743	,	_	_	
6-25	744-747	and	_	_	
6-26	748-750	so	_	_	
6-27	751-753	on	_	_	
6-28	753-754	.	_	_	

#Text=The illustrated example packet structure includes a data "seed" 400 that has been randomly encrypted using a device fingerprint (for example, a key array).
7-1	755-758	The	_	_	
7-2	759-770	illustrated	_	_	
7-3	771-778	example	_	_	
7-4	779-785	packet	_	_	
7-5	786-795	structure	_	_	
7-6	796-804	includes	_	_	
7-7	805-806	a	_	_	
7-8	807-811	data	_	_	
7-9	812-813	"	_	_	
7-10	813-817	seed	_	_	
7-11	817-818	"	_	_	
7-12	819-822	400	_	_	
7-13	823-827	that	_	_	
7-14	828-831	has	_	_	
7-15	832-836	been	_	_	
7-16	837-845	randomly	_	_	
7-17	846-855	encrypted	_	_	
7-18	856-861	using	_	_	
7-19	862-863	a	_	_	
7-20	864-870	device	_	_	
7-21	871-882	fingerprint	_	_	
7-22	883-884	(	_	_	
7-23	884-887	for	_	_	
7-24	888-895	example	_	_	
7-25	895-896	,	_	_	
7-26	897-898	a	_	_	
7-27	899-902	key	_	_	
7-28	903-908	array	_	_	
7-29	908-909	)	_	_	
7-30	909-910	.	_	_	

#Text=It also includes a secure shell 420 with embedded security tools that are used to: securely deliver the encrypted seed; validate the sender; and detect and classify possible cyber attacks.
8-1	911-913	It	_	_	
8-2	914-918	also	_	_	
8-3	919-927	includes	_	_	
8-4	928-929	a	_	_	
8-5	930-936	secure	_	_	
8-6	937-942	shell	_	_	
8-7	943-946	420	_	_	
8-8	947-951	with	_	_	
8-9	952-960	embedded	_	_	
8-10	961-969	security	_	_	
8-11	970-975	tools	_	_	
8-12	976-980	that	_	_	
8-13	981-984	are	_	_	
8-14	985-989	used	_	_	
8-15	990-992	to	_	_	
8-16	992-993	:	_	_	
8-17	994-1002	securely	_	_	
8-18	1003-1010	deliver	_	_	
8-19	1011-1014	the	_	_	
8-20	1015-1024	encrypted	_	_	
8-21	1025-1029	seed	_	_	
8-22	1029-1030	;	_	_	
8-23	1031-1039	validate	_	_	
8-24	1040-1043	the	_	_	
8-25	1044-1050	sender	_	_	
8-26	1050-1051	;	_	_	
8-27	1052-1055	and	_	_	
8-28	1056-1062	detect	_	_	
8-29	1063-1066	and	_	_	
8-30	1067-1075	classify	_	_	
8-31	1076-1084	possible	_	_	
8-32	1085-1090	cyber	_	_	
8-33	1091-1098	attacks	_	_	
8-34	1098-1099	.	_	_	

#Text=In other examples, the shell 420 can be encrypted using a transport key array rather than the seed key array.
9-1	1100-1102	In	_	_	
9-2	1103-1108	other	_	_	
9-3	1109-1117	examples	_	_	
9-4	1117-1118	,	_	_	
9-5	1119-1122	the	_	_	
9-6	1123-1128	shell	_	_	
9-7	1129-1132	420	_	_	
9-8	1133-1136	can	_	_	
9-9	1137-1139	be	_	_	
9-10	1140-1149	encrypted	_	_	
9-11	1150-1155	using	_	_	
9-12	1156-1157	a	_	_	
9-13	1158-1167	transport	_	_	
9-14	1168-1171	key	_	_	
9-15	1172-1177	array	_	_	
9-16	1178-1184	rather	_	_	
9-17	1185-1189	than	_	_	
9-18	1190-1193	the	_	_	
9-19	1194-1198	seed	_	_	
9-20	1199-1202	key	_	_	
9-21	1203-1208	array	_	_	
9-22	1208-1209	.	_	_	

#Text=This transport key array may be encrypted using the device key array, and could be securely and wirelessly sent and dynamically changed if necessary.
10-1	1210-1214	This	_	_	
10-2	1215-1224	transport	_	_	
10-3	1225-1228	key	_	_	
10-4	1229-1234	array	_	_	
10-5	1235-1238	may	_	_	
10-6	1239-1241	be	_	_	
10-7	1242-1251	encrypted	_	_	
10-8	1252-1257	using	_	_	
10-9	1258-1261	the	_	_	
10-10	1262-1268	device	_	_	
10-11	1269-1272	key	_	_	
10-12	1273-1278	array	_	_	
10-13	1278-1279	,	_	_	
10-14	1280-1283	and	_	_	
10-15	1284-1289	could	_	_	
10-16	1290-1292	be	_	_	
10-17	1293-1301	securely	_	_	
10-18	1302-1305	and	_	_	
10-19	1306-1316	wirelessly	_	_	
10-20	1317-1321	sent	_	_	
10-21	1322-1325	and	_	_	
10-22	1326-1337	dynamically	_	_	
10-23	1338-1345	changed	_	_	
10-24	1346-1348	if	_	_	
10-25	1349-1358	necessary	_	_	
10-26	1358-1359	.	_	_	

#Text=This avoids sending the device key array through wire or air in any form.
11-1	1360-1364	This	_	_	
11-2	1365-1371	avoids	_	_	
11-3	1372-1379	sending	_	_	
11-4	1380-1383	the	_	_	
11-5	1384-1390	device	_	_	
11-6	1391-1394	key	_	_	
11-7	1395-1400	array	_	_	
11-8	1401-1408	through	_	_	
11-9	1409-1413	wire	_	_	
11-10	1414-1416	or	_	_	
11-11	1417-1420	air	_	_	
11-12	1421-1423	in	_	_	
11-13	1424-1427	any	_	_	
11-14	1428-1432	form	_	_	
11-15	1432-1433	.	_	_	

#Text=Because the key array is not sent, invalid devices do not have a chance to gain access to the system, so the communication cannot be cracked.
#Text=[0069] Some examples may enable bidirectional device authentication and trust without traditional bidirectional authentication algorithms by transforming traditional fixed-field packets into an unpredictable random bit streams.
12-1	1434-1441	Because	_	_	
12-2	1442-1445	the	_	_	
12-3	1446-1449	key	_	_	
12-4	1450-1455	array	_	_	
12-5	1456-1458	is	_	_	
12-6	1459-1462	not	_	_	
12-7	1463-1467	sent	_	_	
12-8	1467-1468	,	_	_	
12-9	1469-1476	invalid	_	_	
12-10	1477-1484	devices	_	_	
12-11	1485-1487	do	_	_	
12-12	1488-1491	not	_	_	
12-13	1492-1496	have	_	_	
12-14	1497-1498	a	_	_	
12-15	1499-1505	chance	_	_	
12-16	1506-1508	to	_	_	
12-17	1509-1513	gain	_	_	
12-18	1514-1520	access	_	_	
12-19	1521-1523	to	_	_	
12-20	1524-1527	the	_	_	
12-21	1528-1534	system	_	_	
12-22	1534-1535	,	_	_	
12-23	1536-1538	so	_	_	
12-24	1539-1542	the	_	_	
12-25	1543-1556	communication	_	_	
12-26	1557-1563	cannot	_	_	
12-27	1564-1566	be	_	_	
12-28	1567-1574	cracked	_	_	
12-29	1574-1575	.	_	_	
12-30	1576-1577	[	_	_	
12-31	1577-1581	0069	_	_	
12-32	1581-1582	]	_	_	
12-33	1583-1587	Some	_	_	
12-34	1588-1596	examples	_	_	
12-35	1597-1600	may	_	_	
12-36	1601-1607	enable	_	_	
12-37	1608-1621	bidirectional	_	_	
12-38	1622-1628	device	_	_	
12-39	1629-1643	authentication	_	_	
12-40	1644-1647	and	_	_	
12-41	1648-1653	trust	_	_	
12-42	1654-1661	without	_	_	
12-43	1662-1673	traditional	_	_	
12-44	1674-1687	bidirectional	_	_	
12-45	1688-1702	authentication	_	_	
12-46	1703-1713	algorithms	_	_	
12-47	1714-1716	by	_	_	
12-48	1717-1729	transforming	_	_	
12-49	1730-1741	traditional	_	_	
12-50	1742-1753	fixed-field	_	_	
12-51	1754-1761	packets	_	_	
12-52	1762-1766	into	_	_	
12-53	1767-1769	an	_	_	
12-54	1770-1783	unpredictable	_	_	
12-55	1784-1790	random	_	_	
12-56	1791-1794	bit	_	_	
12-57	1795-1802	streams	_	_	
12-58	1802-1803	.	_	_	

#Text=These examples may also provide reliable tools and mechanisms to detect and classify different kinds of electronic attacks and protect against those attacks.
13-1	1804-1809	These	_	_	
13-2	1810-1818	examples	_	_	
13-3	1819-1822	may	_	_	
13-4	1823-1827	also	_	_	
13-5	1828-1835	provide	_	_	
13-6	1836-1844	reliable	_	_	
13-7	1845-1850	tools	_	_	
13-8	1851-1854	and	_	_	
13-9	1855-1865	mechanisms	_	_	
13-10	1866-1868	to	_	_	
13-11	1869-1875	detect	_	_	
13-12	1876-1879	and	_	_	
13-13	1880-1888	classify	_	_	
13-14	1889-1898	different	_	_	
13-15	1899-1904	kinds	_	_	
13-16	1905-1907	of	_	_	
13-17	1908-1918	electronic	_	_	
13-18	1919-1926	attacks	_	_	
13-19	1927-1930	and	_	_	
13-20	1931-1938	protect	_	_	
13-21	1939-1946	against	_	_	
13-22	1947-1952	those	_	_	
13-23	1953-1960	attacks	_	_	
13-24	1960-1961	.	_	_	

#Text=Some examples may employ a receiver station and a sending device.
14-1	1962-1966	Some	_	_	
14-2	1967-1975	examples	_	_	
14-3	1976-1979	may	_	_	
14-4	1980-1986	employ	_	_	
14-5	1987-1988	a	_	_	
14-6	1989-1997	receiver	_	_	
14-7	1998-2005	station	_	_	
14-8	2006-2009	and	_	_	
14-9	2010-2011	a	_	_	
14-10	2012-2019	sending	_	_	
14-11	2020-2026	device	_	_	
14-12	2026-2027	.	_	_	

#Text=A receiver station that has a copy of a sending device's key array is able to recognize: which sending device an information packet belongs to; if it is a valid device; and what the data is, because all this information is hidden in the data packet structure and contents.
15-1	2028-2029	A	_	_	
15-2	2030-2038	receiver	_	_	
15-3	2039-2046	station	_	_	
15-4	2047-2051	that	_	_	
15-5	2052-2055	has	_	_	
15-6	2056-2057	a	_	_	
15-7	2058-2062	copy	_	_	
15-8	2063-2065	of	_	_	
15-9	2066-2067	a	_	_	
15-10	2068-2075	sending	_	_	
15-11	2076-2084	device's	_	_	
15-12	2085-2088	key	_	_	
15-13	2089-2094	array	_	_	
15-14	2095-2097	is	_	_	
15-15	2098-2102	able	_	_	
15-16	2103-2105	to	_	_	
15-17	2106-2115	recognize	_	_	
15-18	2115-2116	:	_	_	
15-19	2117-2122	which	_	_	
15-20	2123-2130	sending	_	_	
15-21	2131-2137	device	_	_	
15-22	2138-2140	an	_	_	
15-23	2141-2152	information	_	_	
15-24	2153-2159	packet	_	_	
15-25	2160-2167	belongs	_	_	
15-26	2168-2170	to	_	_	
15-27	2170-2171	;	_	_	
15-28	2172-2174	if	_	_	
15-29	2175-2177	it	_	_	
15-30	2178-2180	is	_	_	
15-31	2181-2182	a	_	_	
15-32	2183-2188	valid	_	_	
15-33	2189-2195	device	_	_	
15-34	2195-2196	;	_	_	
15-35	2197-2200	and	_	_	
15-36	2201-2205	what	_	_	
15-37	2206-2209	the	_	_	
15-38	2210-2214	data	_	_	
15-39	2215-2217	is	_	_	
15-40	2217-2218	,	_	_	
15-41	2219-2226	because	_	_	
15-42	2227-2230	all	_	_	
15-43	2231-2235	this	_	_	
15-44	2236-2247	information	_	_	
15-45	2248-2250	is	_	_	
15-46	2251-2257	hidden	_	_	
15-47	2258-2260	in	_	_	
15-48	2261-2264	the	_	_	
15-49	2265-2269	data	_	_	
15-50	2270-2276	packet	_	_	
15-51	2277-2286	structure	_	_	
15-52	2287-2290	and	_	_	
15-53	2291-2299	contents	_	_	
15-54	2299-2300	.	_	_	

#Text=The receiving station may recognize this information even without knowing a sender's address.
16-1	2301-2304	The	_	_	
16-2	2305-2314	receiving	_	_	
16-3	2315-2322	station	_	_	
16-4	2323-2326	may	_	_	
16-5	2327-2336	recognize	_	_	
16-6	2337-2341	this	_	_	
16-7	2342-2353	information	_	_	
16-8	2354-2358	even	_	_	
16-9	2359-2366	without	_	_	
16-10	2367-2374	knowing	_	_	
16-11	2375-2376	a	_	_	
16-12	2377-2385	sender's	_	_	
16-13	2386-2393	address	_	_	
16-14	2393-2394	.	_	_	

#Text=For example, this identification can be achieved by simultaneously decrypting the packet header using copies of the different devices' key arrays.
17-1	2395-2398	For	_	_	
17-2	2399-2406	example	_	_	
17-3	2406-2407	,	_	_	
17-4	2408-2412	this	_	_	
17-5	2413-2427	identification	_	_	
17-6	2428-2431	can	_	_	
17-7	2432-2434	be	_	_	
17-8	2435-2443	achieved	_	_	
17-9	2444-2446	by	_	_	
17-10	2447-2461	simultaneously	_	_	
17-11	2462-2472	decrypting	_	_	
17-12	2473-2476	the	_	_	
17-13	2477-2483	packet	_	_	
17-14	2484-2490	header	_	_	
17-15	2491-2496	using	_	_	
17-16	2497-2503	copies	_	_	
17-17	2504-2506	of	_	_	
17-18	2507-2510	the	_	_	
17-19	2511-2520	different	_	_	
17-20	2521-2528	devices	_	_	
17-21	2528-2529	'	_	_	
17-22	2530-2533	key	_	_	
17-23	2534-2540	arrays	_	_	
17-24	2540-2541	.	_	_	

#Text=The sending device is the first device whose key array enables checksum matching.
18-1	2542-2545	The	*[1]	19-1[2_1]	
18-2	2546-2553	sending	*[1]	_	
18-3	2554-2560	device	*[1]	_	
18-4	2561-2563	is	*[1]	_	
18-5	2564-2567	the	*[1]	_	
18-6	2568-2573	first	*[1]	_	
18-7	2574-2580	device	*[1]	_	
18-8	2581-2586	whose	*[1]	_	
18-9	2587-2590	key	*[1]	_	
18-10	2591-2596	array	*[1]	_	
18-11	2597-2604	enables	*[1]	_	
18-12	2605-2613	checksum	*[1]	_	
18-13	2614-2622	matching	*[1]	_	
18-14	2622-2623	.	*[1]	_	

#Text=This method works equally well in a backward direction.
#Text=[0070] As the example in FIG. 9 illustrates, a data packet may appear to be an unpredictable random bit stream without fixed-length fields.
19-1	2624-2628	This	*[2]	_	
19-2	2629-2635	method	*[2]	_	
19-3	2636-2641	works	_	_	
19-4	2642-2649	equally	_	_	
19-5	2650-2654	well	_	_	
19-6	2655-2657	in	_	_	
19-7	2658-2659	a	_	_	
19-8	2660-2668	backward	_	_	
19-9	2669-2678	direction	_	_	
19-10	2678-2679	.	_	_	
19-11	2680-2681	[	_	_	
19-12	2681-2685	0070	_	_	
19-13	2685-2686	]	_	_	
19-14	2687-2689	As	_	_	
19-15	2690-2693	the	_	_	
19-16	2694-2701	example	_	_	
19-17	2702-2704	in	_	_	
19-18	2705-2708	FIG	_	_	
19-19	2708-2709	.	_	_	
19-20	2710-2711	9	_	_	
19-21	2712-2723	illustrates	_	_	
19-22	2723-2724	,	_	_	
19-23	2725-2726	a	_	_	
19-24	2727-2731	data	_	_	
19-25	2732-2738	packet	_	_	
19-26	2739-2742	may	_	_	
19-27	2743-2749	appear	_	_	
19-28	2750-2752	to	_	_	
19-29	2753-2755	be	_	_	
19-30	2756-2758	an	_	_	
19-31	2759-2772	unpredictable	_	_	
19-32	2773-2779	random	_	_	
19-33	2780-2783	bit	_	_	
19-34	2784-2790	stream	_	_	
19-35	2791-2798	without	_	_	
19-36	2799-2811	fixed-length	_	_	
19-37	2812-2818	fields	_	_	
19-38	2818-2819	.	_	_	

#Text=This data packet structure may provide security and trust benefits and further enable implementation of many additional features.
20-1	2820-2824	This	_	_	
20-2	2825-2829	data	_	_	
20-3	2830-2836	packet	_	_	
20-4	2837-2846	structure	_	_	
20-5	2847-2850	may	_	_	
20-6	2851-2858	provide	_	_	
20-7	2859-2867	security	_	_	
20-8	2868-2871	and	_	_	
20-9	2872-2877	trust	_	_	
20-10	2878-2886	benefits	_	_	
20-11	2887-2890	and	_	_	
20-12	2891-2898	further	_	_	
20-13	2899-2905	enable	_	_	
20-14	2906-2920	implementation	_	_	
20-15	2921-2923	of	_	_	
20-16	2924-2928	many	_	_	
20-17	2929-2939	additional	_	_	
20-18	2940-2948	features	_	_	
20-19	2948-2949	.	_	_	

#Text=For example, all the information in the packet (except the random tail) may be encrypted with bit-inserting and/or bit-swapping encryption algorithms such as those described herein.
21-1	2950-2953	For	_	_	
21-2	2954-2961	example	_	_	
21-3	2961-2962	,	_	_	
21-4	2963-2966	all	_	_	
21-5	2967-2970	the	_	_	
21-6	2971-2982	information	_	_	
21-7	2983-2985	in	_	_	
21-8	2986-2989	the	_	_	
21-9	2990-2996	packet	_	_	
21-10	2997-2998	(	_	_	
21-11	2998-3004	except	_	_	
21-12	3005-3008	the	_	_	
21-13	3009-3015	random	_	_	
21-14	3016-3020	tail	_	_	
21-15	3020-3021	)	_	_	
21-16	3022-3025	may	_	_	
21-17	3026-3028	be	_	_	
21-18	3029-3038	encrypted	_	_	
21-19	3039-3043	with	_	_	
21-20	3044-3057	bit-inserting	_	_	
21-21	3058-3061	and	_	_	
21-22	3061-3062	/	_	_	
21-23	3062-3064	or	_	_	
21-24	3065-3077	bit-swapping	_	_	
21-25	3078-3088	encryption	_	_	
21-26	3089-3099	algorithms	_	_	
21-27	3100-3104	such	_	_	
21-28	3105-3107	as	_	_	
21-29	3108-3113	those	_	_	
21-30	3114-3123	described	_	_	
21-31	3124-3130	herein	_	_	
21-32	3130-3131	.	_	_	

#Text=Exemplary packets can, but need not, have any fixed-length fields at all.
22-1	3132-3141	Exemplary	_	_	
22-2	3142-3149	packets	_	_	
22-3	3150-3153	can	_	_	
22-4	3153-3154	,	_	_	
22-5	3155-3158	but	_	_	
22-6	3159-3163	need	_	_	
22-7	3164-3167	not	_	_	
22-8	3167-3168	,	_	_	
22-9	3169-3173	have	_	_	
22-10	3174-3177	any	_	_	
22-11	3178-3190	fixed-length	_	_	
22-12	3191-3197	fields	_	_	
22-13	3198-3200	at	_	_	
22-14	3201-3204	all	_	_	
22-15	3204-3205	.	_	_	

#Text=In certain examples, the packet may start with a TSKI random number encrypted according to one or both of the above-described algorithms with its checksum following timestamp and timestamp's checksum.
23-1	3206-3208	In	_	_	
23-2	3209-3216	certain	_	_	
23-3	3217-3225	examples	_	_	
23-4	3225-3226	,	_	_	
23-5	3227-3230	the	_	_	
23-6	3231-3237	packet	_	_	
23-7	3238-3241	may	_	_	
23-8	3242-3247	start	_	_	
23-9	3248-3252	with	_	_	
23-10	3253-3254	a	_	_	
23-11	3255-3259	TSKI	_	_	
23-12	3260-3266	random	_	_	
23-13	3267-3273	number	_	_	
23-14	3274-3283	encrypted	_	_	
23-15	3284-3293	according	_	_	
23-16	3294-3296	to	_	_	
23-17	3297-3300	one	_	_	
23-18	3301-3303	or	_	_	
23-19	3304-3308	both	_	_	
23-20	3309-3311	of	_	_	
23-21	3312-3315	the	_	_	
23-22	3316-3331	above-described	_	_	
23-23	3332-3342	algorithms	_	_	
23-24	3343-3347	with	_	_	
23-25	3348-3351	its	_	_	
23-26	3352-3360	checksum	_	_	
23-27	3361-3370	following	_	_	
23-28	3371-3380	timestamp	_	_	
23-29	3381-3384	and	_	_	
23-30	3385-3396	timestamp's	_	_	
23-31	3397-3405	checksum	_	_	
23-32	3405-3406	.	_	_	

#Text=In further examples, the timestamp and timestamp's checksum may also be encrypted as described above.
24-1	3407-3409	In	_	_	
24-2	3410-3417	further	_	_	
24-3	3418-3426	examples	_	_	
24-4	3426-3427	,	_	_	
24-5	3428-3431	the	_	_	
24-6	3432-3441	timestamp	_	_	
24-7	3442-3445	and	_	_	
24-8	3446-3457	timestamp's	_	_	
24-9	3458-3466	checksum	_	_	
24-10	3467-3470	may	_	_	
24-11	3471-3475	also	_	_	
24-12	3476-3478	be	_	_	
24-13	3479-3488	encrypted	_	_	
24-14	3489-3491	as	_	_	
24-15	3492-3501	described	_	_	
24-16	3502-3507	above	_	_	
24-17	3507-3508	.	_	_	

#Text=In further embodiments, other security features may be employed.
25-1	3509-3511	In	_	_	
25-2	3512-3519	further	_	_	
25-3	3520-3531	embodiments	_	_	
25-4	3531-3532	,	_	_	
25-5	3533-3538	other	_	_	
25-6	3539-3547	security	_	_	
25-7	3548-3556	features	_	_	
25-8	3557-3560	may	_	_	
25-9	3561-3563	be	_	_	
25-10	3564-3572	employed	_	_	
25-11	3572-3573	.	_	_	

#Text=For example, message authentication codes (MACs) may be inserted in locations in messages according to the methods described herein.
26-1	3574-3577	For	_	_	
26-2	3578-3585	example	_	_	
26-3	3585-3586	,	_	_	
26-4	3587-3594	message	_	_	
26-5	3595-3609	authentication	_	_	
26-6	3610-3615	codes	_	_	
26-7	3616-3617	(	_	_	
26-8	3617-3621	MACs	_	_	
26-9	3621-3622	)	_	_	
26-10	3623-3626	may	_	_	
26-11	3627-3629	be	_	_	
26-12	3630-3638	inserted	_	_	
26-13	3639-3641	in	_	_	
26-14	3642-3651	locations	_	_	
26-15	3652-3654	in	_	_	
26-16	3655-3663	messages	_	_	
26-17	3664-3673	according	_	_	
26-18	3674-3676	to	_	_	
26-19	3677-3680	the	_	_	
26-20	3681-3688	methods	_	_	
26-21	3689-3698	described	_	_	
26-22	3699-3705	herein	_	_	
26-23	3705-3706	.	_	_	

#Text=In some embodiments, the MACs might comprise conventional cipher-based MACs or hash-based MACs such as a MAC based on universal hashing.
#Text=[0071] In some examples, communication may be asynchronous.
27-1	3707-3709	In	_	_	
27-2	3710-3714	some	_	_	
27-3	3715-3726	embodiments	_	_	
27-4	3726-3727	,	_	_	
27-5	3728-3731	the	_	_	
27-6	3732-3736	MACs	_	_	
27-7	3737-3742	might	_	_	
27-8	3743-3751	comprise	_	_	
27-9	3752-3764	conventional	_	_	
27-10	3765-3777	cipher-based	_	_	
27-11	3778-3782	MACs	_	_	
27-12	3783-3785	or	_	_	
27-13	3786-3796	hash-based	_	_	
27-14	3797-3801	MACs	_	_	
27-15	3802-3806	such	_	_	
27-16	3807-3809	as	_	_	
27-17	3810-3811	a	_	_	
27-18	3812-3815	MAC	_	_	
27-19	3816-3821	based	_	_	
27-20	3822-3824	on	_	_	
27-21	3825-3834	universal	_	_	
27-22	3835-3842	hashing	_	_	
27-23	3842-3843	.	_	_	
27-24	3844-3845	[	_	_	
27-25	3845-3849	0071	_	_	
27-26	3849-3850	]	_	_	
27-27	3851-3853	In	_	_	
27-28	3854-3858	some	_	_	
27-29	3859-3867	examples	_	_	
27-30	3867-3868	,	_	_	
27-31	3869-3882	communication	_	_	
27-32	3883-3886	may	_	_	
27-33	3887-3889	be	_	_	
27-34	3890-3902	asynchronous	_	_	
27-35	3902-3903	.	_	_	

#Text=Further examples may use timers for security purposes.
28-1	3904-3911	Further	_	_	
28-2	3912-3920	examples	_	_	
28-3	3921-3924	may	_	_	
28-4	3925-3928	use	_	_	
28-5	3929-3935	timers	_	_	
28-6	3936-3939	for	_	_	
28-7	3940-3948	security	_	_	
28-8	3949-3957	purposes	_	_	
28-9	3957-3958	.	_	_	

#Text=These timers do not have to be precisely synchronized in the system.
29-1	3959-3964	These	_	_	
29-2	3965-3971	timers	_	_	
29-3	3972-3974	do	_	_	
29-4	3975-3978	not	_	_	
29-5	3979-3983	have	_	_	
29-6	3984-3986	to	_	_	
29-7	3987-3989	be	_	_	
29-8	3990-3999	precisely	_	_	
29-9	4000-4012	synchronized	_	_	
29-10	4013-4015	in	_	_	
29-11	4016-4019	the	_	_	
29-12	4020-4026	system	_	_	
29-13	4026-4027	.	_	_	

#Text=However precise timer synchronization may be required by an environment monitoring/measurement task.
30-1	4028-4035	However	_	_	
30-2	4036-4043	precise	_	_	
30-3	4044-4049	timer	_	_	
30-4	4050-4065	synchronization	_	_	
30-5	4066-4069	may	_	_	
30-6	4070-4072	be	_	_	
30-7	4073-4081	required	_	_	
30-8	4082-4084	by	_	_	
30-9	4085-4087	an	_	_	
30-10	4088-4099	environment	_	_	
30-11	4100-4110	monitoring	_	_	
30-12	4110-4111	/	_	_	
30-13	4111-4122	measurement	_	_	
30-14	4123-4127	task	_	_	
30-15	4127-4128	.	_	_	

#Text=For security, approximately plus or minus 2 to 5 minutes inconsistence in synchronization between timers of neighboring nodes will provide an acceptable time-trust window and reliable packet validation and guarantee a high level of trust in the system.
31-1	4129-4132	For	_	_	
31-2	4133-4141	security	_	_	
31-3	4141-4142	,	_	_	
31-4	4143-4156	approximately	_	_	
31-5	4157-4161	plus	_	_	
31-6	4162-4164	or	_	_	
31-7	4165-4170	minus	_	_	
31-8	4171-4172	2	_	_	
31-9	4173-4175	to	_	_	
31-10	4176-4177	5	_	_	
31-11	4178-4185	minutes	_	_	
31-12	4186-4199	inconsistence	_	_	
31-13	4200-4202	in	_	_	
31-14	4203-4218	synchronization	_	_	
31-15	4219-4226	between	_	_	
31-16	4227-4233	timers	_	_	
31-17	4234-4236	of	_	_	
31-18	4237-4248	neighboring	_	_	
31-19	4249-4254	nodes	_	_	
31-20	4255-4259	will	_	_	
31-21	4260-4267	provide	_	_	
31-22	4268-4270	an	_	_	
31-23	4271-4281	acceptable	_	_	
31-24	4282-4292	time-trust	_	_	
31-25	4293-4299	window	_	_	
31-26	4300-4303	and	_	_	
31-27	4304-4312	reliable	_	_	
31-28	4313-4319	packet	_	_	
31-29	4320-4330	validation	_	_	
31-30	4331-4334	and	_	_	
31-31	4335-4344	guarantee	_	_	
31-32	4345-4346	a	_	_	
31-33	4347-4351	high	_	_	
31-34	4352-4357	level	_	_	
31-35	4358-4360	of	_	_	
31-36	4361-4366	trust	_	_	
31-37	4367-4369	in	_	_	
31-38	4370-4373	the	_	_	
31-39	4374-4380	system	_	_	
31-40	4380-4381	.	_	_	
