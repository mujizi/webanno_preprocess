#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0106] Similarly, in the operating state OS#2 is temporarily shifted to the halted state by the suspend controller 423 using the OS#2 suspend function, and the right of execution is shifted to the multi-OS initialization unit 401 to activate another OS (see 607 and 608).
1-1	0-1	[	_	_	
1-2	1-5	0106	_	_	
1-3	5-6	]	_	_	
1-4	7-16	Similarly	_	_	
1-5	16-17	,	_	_	
1-6	18-20	in	_	_	
1-7	21-24	the	_	_	
1-8	25-34	operating	_	_	
1-9	35-40	state	_	_	
1-10	41-43	OS	_	_	
1-11	43-45	#2	_	_	
1-12	46-48	is	_	_	
1-13	49-60	temporarily	_	_	
1-14	61-68	shifted	_	_	
1-15	69-71	to	_	_	
1-16	72-75	the	_	_	
1-17	76-82	halted	_	_	
1-18	83-88	state	_	_	
1-19	89-91	by	_	_	
1-20	92-95	the	_	_	
1-21	96-103	suspend	_	_	
1-22	104-114	controller	_	_	
1-23	115-118	423	_	_	
1-24	119-124	using	_	_	
1-25	125-128	the	_	_	
1-26	129-131	OS	_	_	
1-27	131-133	#2	_	_	
1-28	134-141	suspend	_	_	
1-29	142-150	function	_	_	
1-30	150-151	,	_	_	
1-31	152-155	and	_	_	
1-32	156-159	the	_	_	
1-33	160-165	right	_	_	
1-34	166-168	of	_	_	
1-35	169-178	execution	_	_	
1-36	179-181	is	_	_	
1-37	182-189	shifted	_	_	
1-38	190-192	to	_	_	
1-39	193-196	the	_	_	
1-40	197-205	multi-OS	_	_	
1-41	206-220	initialization	_	_	
1-42	221-225	unit	_	_	
1-43	226-229	401	_	_	
1-44	230-232	to	_	_	
1-45	233-241	activate	_	_	
1-46	242-249	another	_	_	
1-47	250-252	OS	_	_	
1-48	253-254	(	_	_	
1-49	254-257	see	_	_	
1-50	258-261	607	_	_	
1-51	262-265	and	_	_	
1-52	266-269	608	_	_	
1-53	269-270	)	_	_	
1-54	270-271	.	_	_	

#Text=Then, the contention memory area is detected, the contents (one part of the program for OS#2) are retracted to the independent logical memory block 400, and the hardware is set to the virtual system initialized state (see 608).
2-1	272-276	Then	_	_	
2-2	276-277	,	_	_	
2-3	278-281	the	_	_	
2-4	282-292	contention	_	_	
2-5	293-299	memory	_	_	
2-6	300-304	area	_	_	
2-7	305-307	is	_	_	
2-8	308-316	detected	_	_	
2-9	316-317	,	_	_	
2-10	318-321	the	_	_	
2-11	322-330	contents	_	_	
2-12	331-332	(	_	_	
2-13	332-335	one	_	_	
2-14	336-340	part	_	_	
2-15	341-343	of	_	_	
2-16	344-347	the	_	_	
2-17	348-355	program	_	_	
2-18	356-359	for	_	_	
2-19	360-362	OS	_	_	
2-20	362-364	#2	_	_	
2-21	364-365	)	_	_	
2-22	366-369	are	_	_	
2-23	370-379	retracted	_	_	
2-24	380-382	to	_	_	
2-25	383-386	the	_	_	
2-26	387-398	independent	_	_	
2-27	399-406	logical	_	_	
2-28	407-413	memory	_	_	
2-29	414-419	block	_	_	
2-30	420-423	400	_	_	
2-31	423-424	,	_	_	
2-32	425-428	and	_	_	
2-33	429-432	the	_	_	
2-34	433-441	hardware	_	_	
2-35	442-444	is	_	_	
2-36	445-448	set	_	_	
2-37	449-451	to	_	_	
2-38	452-455	the	_	_	
2-39	456-463	virtual	_	_	
2-40	464-470	system	_	_	
2-41	471-482	initialized	_	_	
2-42	483-488	state	_	_	
2-43	489-490	(	_	_	
2-44	490-493	see	_	_	
2-45	494-497	608	_	_	
2-46	497-498	)	_	_	
2-47	498-499	.	_	_	

#Text=Thereafter, the boot loader for OS#3 is developed in the OS#3 logical memory block 430, and the right of execution is shifted (see 609).
3-1	500-510	Thereafter	_	_	
3-2	510-511	,	_	_	
3-3	512-515	the	_	_	
3-4	516-520	boot	_	_	
3-5	521-527	loader	_	_	
3-6	528-531	for	_	_	
3-7	532-534	OS	_	_	
3-8	534-536	#3	_	_	
3-9	537-539	is	_	_	
3-10	540-549	developed	_	_	
3-11	550-552	in	_	_	
3-12	553-556	the	_	_	
3-13	557-559	OS	_	_	
3-14	559-561	#3	_	_	
3-15	562-569	logical	_	_	
3-16	570-576	memory	_	_	
3-17	577-582	block	_	_	
3-18	583-586	430	_	_	
3-19	586-587	,	_	_	
3-20	588-591	and	_	_	
3-21	592-595	the	_	_	
3-22	596-601	right	_	_	
3-23	602-604	of	_	_	
3-24	605-614	execution	_	_	
3-25	615-617	is	_	_	
3-26	618-625	shifted	_	_	
3-27	626-627	(	_	_	
3-28	627-630	see	_	_	
3-29	631-634	609	_	_	
3-30	634-635	)	_	_	
3-31	635-636	.	_	_	

#Text=Thus, the third OS, OS#3, is set in the operating state (see 610).
#Text=[0107] Through the above operation, activation of all three OSs, OS#1, OS#2 and OS#3, is completed, and the multi-OS operating environment is constructed.
4-1	637-641	Thus	_	_	
4-2	641-642	,	_	_	
4-3	643-646	the	_	_	
4-4	647-652	third	_	_	
4-5	653-655	OS	_	_	
4-6	655-656	,	_	_	
4-7	657-659	OS	_	_	
4-8	659-661	#3	_	_	
4-9	661-662	,	_	_	
4-10	663-665	is	_	_	
4-11	666-669	set	_	_	
4-12	670-672	in	_	_	
4-13	673-676	the	_	_	
4-14	677-686	operating	_	_	
4-15	687-692	state	_	_	
4-16	693-694	(	_	_	
4-17	694-697	see	_	_	
4-18	698-701	610	_	_	
4-19	701-702	)	_	_	
4-20	702-703	.	_	_	
4-21	704-705	[	_	_	
4-22	705-709	0107	_	_	
4-23	709-710	]	_	_	
4-24	711-718	Through	_	_	
4-25	719-722	the	_	_	
4-26	723-728	above	_	_	
4-27	729-738	operation	_	_	
4-28	738-739	,	_	_	
4-29	740-750	activation	_	_	
4-30	751-753	of	_	_	
4-31	754-757	all	_	_	
4-32	758-763	three	_	_	
4-33	764-767	OSs	_	_	
4-34	767-768	,	_	_	
4-35	769-771	OS	_	_	
4-36	771-773	#1	_	_	
4-37	773-774	,	_	_	
4-38	775-777	OS	_	_	
4-39	777-779	#2	_	_	
4-40	780-783	and	_	_	
4-41	784-786	OS	_	_	
4-42	786-788	#3	_	_	
4-43	788-789	,	_	_	
4-44	790-792	is	_	_	
4-45	793-802	completed	_	_	
4-46	802-803	,	_	_	
4-47	804-807	and	_	_	
4-48	808-811	the	_	_	
4-49	812-820	multi-OS	_	_	
4-50	821-830	operating	_	_	
4-51	831-842	environment	_	_	
4-52	843-845	is	_	_	
4-53	846-857	constructed	_	_	
4-54	857-858	.	_	_	

#Text=At this time, OS#1 and OS#2, which were activated first, are temporarily placed in the halted state using the suspend function, and the last activated OS, OS#3, is in the operating state.
#Text=[0108] An explanation will now be given for the method used to load the function execution units into the independent logical memory block 400 before all the OSs are loaded.
5-1	859-861	At	_	_	
5-2	862-866	this	_	_	
5-3	867-871	time	_	_	
5-4	871-872	,	_	_	
5-5	873-875	OS	_	_	
5-6	875-877	#1	_	_	
5-7	878-881	and	_	_	
5-8	882-884	OS	_	_	
5-9	884-886	#2	_	_	
5-10	886-887	,	_	_	
5-11	888-893	which	_	_	
5-12	894-898	were	_	_	
5-13	899-908	activated	_	_	
5-14	909-914	first	_	_	
5-15	914-915	,	_	_	
5-16	916-919	are	_	_	
5-17	920-931	temporarily	_	_	
5-18	932-938	placed	_	_	
5-19	939-941	in	_	_	
5-20	942-945	the	_	_	
5-21	946-952	halted	_	_	
5-22	953-958	state	_	_	
5-23	959-964	using	_	_	
5-24	965-968	the	_	_	
5-25	969-976	suspend	_	_	
5-26	977-985	function	_	_	
5-27	985-986	,	_	_	
5-28	987-990	and	_	_	
5-29	991-994	the	_	_	
5-30	995-999	last	_	_	
5-31	1000-1009	activated	_	_	
5-32	1010-1012	OS	_	_	
5-33	1012-1013	,	_	_	
5-34	1014-1016	OS	_	_	
5-35	1016-1018	#3	_	_	
5-36	1018-1019	,	_	_	
5-37	1020-1022	is	_	_	
5-38	1023-1025	in	_	_	
5-39	1026-1029	the	_	_	
5-40	1030-1039	operating	_	_	
5-41	1040-1045	state	_	_	
5-42	1045-1046	.	_	_	
5-43	1047-1048	[	*[1]	6-3[2_1]	
5-44	1048-1052	0108	*[1]	_	
5-45	1052-1053	]	*[1]	_	
5-46	1054-1056	An	*[1]	_	
5-47	1057-1068	explanation	*[1]	_	
5-48	1069-1073	will	*[1]	_	
5-49	1074-1077	now	*[1]	_	
5-50	1078-1080	be	*[1]	_	
5-51	1081-1086	given	*[1]	_	
5-52	1087-1090	for	*[1]	_	
5-53	1091-1094	the	*[1]	_	
5-54	1095-1101	method	*[1]	_	
5-55	1102-1106	used	*[1]	_	
5-56	1107-1109	to	*[1]	_	
5-57	1110-1114	load	*[1]	_	
5-58	1115-1118	the	*[1]	_	
5-59	1119-1127	function	*[1]	_	
5-60	1128-1137	execution	*[1]	_	
5-61	1138-1143	units	*[1]	_	
5-62	1144-1148	into	*[1]	_	
5-63	1149-1152	the	*[1]	_	
5-64	1153-1164	independent	*[1]	_	
5-65	1165-1172	logical	*[1]	_	
5-66	1173-1179	memory	*[1]	_	
5-67	1180-1185	block	*[1]	_	
5-68	1186-1189	400	*[1]	_	
5-69	1190-1196	before	*[1]	_	
5-70	1197-1200	all	*[1]	_	
5-71	1201-1204	the	*[1]	_	
5-72	1205-1208	OSs	*[1]	_	
5-73	1209-1212	are	*[1]	_	
5-74	1213-1219	loaded	*[1]	_	
5-75	1219-1220	.	*[1]	_	

#Text=According to this method, the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, the OS characteristic registration unit 406 and the OS boot loader registration unit 407 form a program package that is to be loaded into the independent logical memory block 400.
6-1	1221-1230	According	_	_	
6-2	1231-1233	to	_	_	
6-3	1234-1238	this	*[2]	_	
6-4	1239-1245	method	*[2]	_	
6-5	1245-1246	,	_	_	
6-6	1247-1250	the	_	_	
6-7	1251-1259	multi-OS	_	_	
6-8	1260-1274	initialization	_	_	
6-9	1275-1279	unit	_	_	
6-10	1280-1283	401	_	_	
6-11	1283-1284	,	_	_	
6-12	1285-1288	the	_	_	
6-13	1289-1296	virtual	_	_	
6-14	1297-1303	system	_	_	
6-15	1304-1318	initialization	_	_	
6-16	1319-1323	unit	_	_	
6-17	1324-1327	402	_	_	
6-18	1327-1328	,	_	_	
6-19	1329-1332	the	_	_	
6-20	1333-1340	logical	_	_	
6-21	1341-1347	memory	_	_	
6-22	1348-1356	division	_	_	
6-23	1357-1367	controller	_	_	
6-24	1368-1371	403	_	_	
6-25	1371-1372	,	_	_	
6-26	1373-1376	the	_	_	
6-27	1377-1384	virtual	_	_	
6-28	1385-1389	boot	_	_	
6-29	1390-1400	controller	_	_	
6-30	1401-1404	404	_	_	
6-31	1404-1405	,	_	_	
6-32	1406-1409	the	_	_	
6-33	1410-1412	OS	_	_	
6-34	1413-1422	switching	_	_	
6-35	1423-1433	controller	_	_	
6-36	1434-1437	405	_	_	
6-37	1437-1438	,	_	_	
6-38	1439-1442	the	_	_	
6-39	1443-1445	OS	_	_	
6-40	1446-1460	characteristic	_	_	
6-41	1461-1473	registration	_	_	
6-42	1474-1478	unit	_	_	
6-43	1479-1482	406	_	_	
6-44	1483-1486	and	_	_	
6-45	1487-1490	the	_	_	
6-46	1491-1493	OS	_	_	
6-47	1494-1498	boot	_	_	
6-48	1499-1505	loader	_	_	
6-49	1506-1518	registration	_	_	
6-50	1519-1523	unit	_	_	
6-51	1524-1527	407	_	_	
6-52	1528-1532	form	_	_	
6-53	1533-1534	a	_	_	
6-54	1535-1542	program	_	_	
6-55	1543-1550	package	_	_	
6-56	1551-1555	that	_	_	
6-57	1556-1558	is	_	_	
6-58	1559-1561	to	_	_	
6-59	1562-1564	be	_	_	
6-60	1565-1571	loaded	_	_	
6-61	1572-1576	into	_	_	
6-62	1577-1580	the	_	_	
6-63	1581-1592	independent	_	_	
6-64	1593-1600	logical	_	_	
6-65	1601-1607	memory	_	_	
6-66	1608-1613	block	_	_	
6-67	1614-1617	400	_	_	
6-68	1617-1618	.	_	_	

#Text=This program package is regarded as an independent OS, and is booted before all the other coexisting OSs.
7-1	1619-1623	This	_	_	
7-2	1624-1631	program	_	_	
7-3	1632-1639	package	_	_	
7-4	1640-1642	is	_	_	
7-5	1643-1651	regarded	_	_	
7-6	1652-1654	as	_	_	
7-7	1655-1657	an	_	_	
7-8	1658-1669	independent	_	_	
7-9	1670-1672	OS	_	_	
7-10	1672-1673	,	_	_	
7-11	1674-1677	and	_	_	
7-12	1678-1680	is	_	_	
7-13	1681-1687	booted	_	_	
7-14	1688-1694	before	_	_	
7-15	1695-1698	all	_	_	
7-16	1699-1702	the	_	_	
7-17	1703-1708	other	_	_	
7-18	1709-1719	coexisting	_	_	
7-19	1720-1723	OSs	_	_	
7-20	1723-1724	.	_	_	

#Text=Therefore, a special partition is independently prepared in the secondary storage device.
#Text=[0109] In this case, all the OSs correspond to the second and following OSs that are booted using the above method in accordance with which the OSs are loaded into the independent logical memory block 400 when the main OS is booted.
8-1	1725-1734	Therefore	_	_	
8-2	1734-1735	,	_	_	
8-3	1736-1737	a	_	_	
8-4	1738-1745	special	_	_	
8-5	1746-1755	partition	_	_	
8-6	1756-1758	is	_	_	
8-7	1759-1772	independently	_	_	
8-8	1773-1781	prepared	_	_	
8-9	1782-1784	in	_	_	
8-10	1785-1788	the	_	_	
8-11	1789-1798	secondary	_	_	
8-12	1799-1806	storage	_	_	
8-13	1807-1813	device	_	_	
8-14	1813-1814	.	_	_	
8-15	1815-1816	[	_	_	
8-16	1816-1820	0109	_	_	
8-17	1820-1821	]	_	_	
8-18	1822-1824	In	_	_	
8-19	1825-1829	this	_	_	
8-20	1830-1834	case	_	_	
8-21	1834-1835	,	_	_	
8-22	1836-1839	all	_	_	
8-23	1840-1843	the	_	_	
8-24	1844-1847	OSs	_	_	
8-25	1848-1858	correspond	_	_	
8-26	1859-1861	to	_	_	
8-27	1862-1865	the	_	_	
8-28	1866-1872	second	_	_	
8-29	1873-1876	and	_	_	
8-30	1877-1886	following	_	_	
8-31	1887-1890	OSs	_	_	
8-32	1891-1895	that	_	_	
8-33	1896-1899	are	_	_	
8-34	1900-1906	booted	_	_	
8-35	1907-1912	using	_	_	
8-36	1913-1916	the	_	_	
8-37	1917-1922	above	_	_	
8-38	1923-1929	method	_	_	
8-39	1930-1932	in	_	_	
8-40	1933-1943	accordance	_	_	
8-41	1944-1948	with	_	_	
8-42	1949-1954	which	_	_	
8-43	1955-1958	the	_	_	
8-44	1959-1962	OSs	_	_	
8-45	1963-1966	are	_	_	
8-46	1967-1973	loaded	_	_	
8-47	1974-1978	into	_	_	
8-48	1979-1982	the	_	_	
8-49	1983-1994	independent	_	_	
8-50	1995-2002	logical	_	_	
8-51	2003-2009	memory	_	_	
8-52	2010-2015	block	_	_	
8-53	2016-2019	400	_	_	
8-54	2020-2024	when	_	_	
8-55	2025-2028	the	_	_	
8-56	2029-2033	main	_	_	
8-57	2034-2036	OS	_	_	
8-58	2037-2039	is	_	_	
8-59	2040-2046	booted	_	_	
8-60	2046-2047	.	_	_	

#Text=Therefore, an OS, such as the main OS, need not be provided that identifies the locally allocated memory area and performs the processing for transmitting the right of control to the multi-OS initialization unit 401 after the local OS is activated, and for shifting the local OS to the halted state.
#Text=[0110] The processing performed when the system is activated is the same as that performed when the main OS is set and activated, except for booting, at step 501 and 502, not the main OS but the program package that includes the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, the OS characteristic registration unit 406 and the OS boot loader registration unit 407.
9-1	2048-2057	Therefore	_	_	
9-2	2057-2058	,	_	_	
9-3	2059-2061	an	_	_	
9-4	2062-2064	OS	_	_	
9-5	2064-2065	,	_	_	
9-6	2066-2070	such	_	_	
9-7	2071-2073	as	_	_	
9-8	2074-2077	the	_	_	
9-9	2078-2082	main	_	_	
9-10	2083-2085	OS	_	_	
9-11	2085-2086	,	_	_	
9-12	2087-2091	need	_	_	
9-13	2092-2095	not	_	_	
9-14	2096-2098	be	_	_	
9-15	2099-2107	provided	_	_	
9-16	2108-2112	that	_	_	
9-17	2113-2123	identifies	_	_	
9-18	2124-2127	the	_	_	
9-19	2128-2135	locally	_	_	
9-20	2136-2145	allocated	_	_	
9-21	2146-2152	memory	_	_	
9-22	2153-2157	area	_	_	
9-23	2158-2161	and	_	_	
9-24	2162-2170	performs	_	_	
9-25	2171-2174	the	_	_	
9-26	2175-2185	processing	_	_	
9-27	2186-2189	for	_	_	
9-28	2190-2202	transmitting	_	_	
9-29	2203-2206	the	_	_	
9-30	2207-2212	right	_	_	
9-31	2213-2215	of	_	_	
9-32	2216-2223	control	_	_	
9-33	2224-2226	to	_	_	
9-34	2227-2230	the	_	_	
9-35	2231-2239	multi-OS	_	_	
9-36	2240-2254	initialization	_	_	
9-37	2255-2259	unit	_	_	
9-38	2260-2263	401	_	_	
9-39	2264-2269	after	_	_	
9-40	2270-2273	the	_	_	
9-41	2274-2279	local	_	_	
9-42	2280-2282	OS	_	_	
9-43	2283-2285	is	_	_	
9-44	2286-2295	activated	_	_	
9-45	2295-2296	,	_	_	
9-46	2297-2300	and	_	_	
9-47	2301-2304	for	_	_	
9-48	2305-2313	shifting	_	_	
9-49	2314-2317	the	_	_	
9-50	2318-2323	local	_	_	
9-51	2324-2326	OS	_	_	
9-52	2327-2329	to	_	_	
9-53	2330-2333	the	_	_	
9-54	2334-2340	halted	_	_	
9-55	2341-2346	state	_	_	
9-56	2346-2347	.	_	_	
9-57	2348-2349	[	_	_	
9-58	2349-2353	0110	_	_	
9-59	2353-2354	]	_	_	
9-60	2355-2358	The	_	_	
9-61	2359-2369	processing	_	_	
9-62	2370-2379	performed	_	_	
9-63	2380-2384	when	_	_	
9-64	2385-2388	the	_	_	
9-65	2389-2395	system	_	_	
9-66	2396-2398	is	_	_	
9-67	2399-2408	activated	_	_	
9-68	2409-2411	is	_	_	
9-69	2412-2415	the	_	_	
9-70	2416-2420	same	_	_	
9-71	2421-2423	as	_	_	
9-72	2424-2428	that	_	_	
9-73	2429-2438	performed	_	_	
9-74	2439-2443	when	_	_	
9-75	2444-2447	the	_	_	
9-76	2448-2452	main	_	_	
9-77	2453-2455	OS	_	_	
9-78	2456-2458	is	_	_	
9-79	2459-2462	set	_	_	
9-80	2463-2466	and	_	_	
9-81	2467-2476	activated	_	_	
9-82	2476-2477	,	_	_	
9-83	2478-2484	except	_	_	
9-84	2485-2488	for	_	_	
9-85	2489-2496	booting	_	_	
9-86	2496-2497	,	_	_	
9-87	2498-2500	at	_	_	
9-88	2501-2505	step	_	_	
9-89	2506-2509	501	_	_	
9-90	2510-2513	and	_	_	
9-91	2514-2517	502	_	_	
9-92	2517-2518	,	_	_	
9-93	2519-2522	not	_	_	
9-94	2523-2526	the	_	_	
9-95	2527-2531	main	_	_	
9-96	2532-2534	OS	_	_	
9-97	2535-2538	but	_	_	
9-98	2539-2542	the	_	_	
9-99	2543-2550	program	_	_	
9-100	2551-2558	package	_	_	
9-101	2559-2563	that	_	_	
9-102	2564-2572	includes	_	_	
9-103	2573-2576	the	_	_	
9-104	2577-2585	multi-OS	_	_	
9-105	2586-2600	initialization	_	_	
9-106	2601-2605	unit	_	_	
9-107	2606-2609	401	_	_	
9-108	2609-2610	,	_	_	
9-109	2611-2614	the	_	_	
9-110	2615-2622	virtual	_	_	
9-111	2623-2629	system	_	_	
9-112	2630-2644	initialization	_	_	
9-113	2645-2649	unit	_	_	
9-114	2650-2653	402	_	_	
9-115	2653-2654	,	_	_	
9-116	2655-2658	the	_	_	
9-117	2659-2666	logical	_	_	
9-118	2667-2673	memory	_	_	
9-119	2674-2682	division	_	_	
9-120	2683-2693	controller	_	_	
9-121	2694-2697	403	_	_	
9-122	2697-2698	,	_	_	
9-123	2699-2702	the	_	_	
9-124	2703-2710	virtual	_	_	
9-125	2711-2715	boot	_	_	
9-126	2716-2726	controller	_	_	
9-127	2727-2730	404	_	_	
9-128	2730-2731	,	_	_	
9-129	2732-2735	the	_	_	
9-130	2736-2738	OS	_	_	
9-131	2739-2748	switching	_	_	
9-132	2749-2759	controller	_	_	
9-133	2760-2763	405	_	_	
9-134	2763-2764	,	_	_	
9-135	2765-2768	the	_	_	
9-136	2769-2771	OS	_	_	
9-137	2772-2786	characteristic	_	_	
9-138	2787-2799	registration	_	_	
9-139	2800-2804	unit	_	_	
9-140	2805-2808	406	_	_	
9-141	2809-2812	and	_	_	
9-142	2813-2816	the	_	_	
9-143	2817-2819	OS	_	_	
9-144	2820-2824	boot	_	_	
9-145	2825-2831	loader	_	_	
9-146	2832-2844	registration	_	_	
9-147	2845-2849	unit	_	_	
9-148	2850-2853	407	_	_	
9-149	2853-2854	.	_	_	

#Text=Further, in FIG. 6, since the program package that includes the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, the OS characteristic registration unit 406 and the OS boot loader registration unit 407 is booted before OS#1 is booted, the loading of the program into the independent logical memory block 400 is terminated when the booting of the ROM has been initiated.
10-1	2855-2862	Further	_	_	
10-2	2862-2863	,	_	_	
10-3	2864-2866	in	_	_	
10-4	2867-2870	FIG	_	_	
10-5	2870-2871	.	_	_	
10-6	2872-2873	6	_	_	
10-7	2873-2874	,	_	_	
10-8	2875-2880	since	_	_	
10-9	2881-2884	the	_	_	
10-10	2885-2892	program	_	_	
10-11	2893-2900	package	_	_	
10-12	2901-2905	that	_	_	
10-13	2906-2914	includes	_	_	
10-14	2915-2918	the	_	_	
10-15	2919-2927	multi-OS	_	_	
10-16	2928-2942	initialization	_	_	
10-17	2943-2947	unit	_	_	
10-18	2948-2951	401	_	_	
10-19	2951-2952	,	_	_	
10-20	2953-2956	the	_	_	
10-21	2957-2964	virtual	_	_	
10-22	2965-2971	system	_	_	
10-23	2972-2986	initialization	_	_	
10-24	2987-2991	unit	_	_	
10-25	2992-2995	402	_	_	
10-26	2995-2996	,	_	_	
10-27	2997-3000	the	_	_	
10-28	3001-3008	logical	_	_	
10-29	3009-3015	memory	_	_	
10-30	3016-3024	division	_	_	
10-31	3025-3035	controller	_	_	
10-32	3036-3039	403	_	_	
10-33	3039-3040	,	_	_	
10-34	3041-3044	the	_	_	
10-35	3045-3052	virtual	_	_	
10-36	3053-3057	boot	_	_	
10-37	3058-3068	controller	_	_	
10-38	3069-3072	404	_	_	
10-39	3072-3073	,	_	_	
10-40	3074-3077	the	_	_	
10-41	3078-3080	OS	_	_	
10-42	3081-3090	switching	_	_	
10-43	3091-3101	controller	_	_	
10-44	3102-3105	405	_	_	
10-45	3105-3106	,	_	_	
10-46	3107-3110	the	_	_	
10-47	3111-3113	OS	_	_	
10-48	3114-3128	characteristic	_	_	
10-49	3129-3141	registration	_	_	
10-50	3142-3146	unit	_	_	
10-51	3147-3150	406	_	_	
10-52	3151-3154	and	_	_	
10-53	3155-3158	the	_	_	
10-54	3159-3161	OS	_	_	
10-55	3162-3166	boot	_	_	
10-56	3167-3173	loader	_	_	
10-57	3174-3186	registration	_	_	
10-58	3187-3191	unit	_	_	
10-59	3192-3195	407	_	_	
10-60	3196-3198	is	_	_	
10-61	3199-3205	booted	_	_	
10-62	3206-3212	before	_	_	
10-63	3213-3215	OS	_	_	
10-64	3215-3217	#1	_	_	
10-65	3218-3220	is	_	_	
10-66	3221-3227	booted	_	_	
10-67	3227-3228	,	_	_	
10-68	3229-3232	the	_	_	
10-69	3233-3240	loading	_	_	
10-70	3241-3243	of	_	_	
10-71	3244-3247	the	_	_	
10-72	3248-3255	program	_	_	
10-73	3256-3260	into	_	_	
10-74	3261-3264	the	_	_	
10-75	3265-3276	independent	_	_	
10-76	3277-3284	logical	_	_	
10-77	3285-3291	memory	_	_	
10-78	3292-3297	block	_	_	
10-79	3298-3301	400	_	_	
10-80	3302-3304	is	_	_	
10-81	3305-3315	terminated	_	_	
10-82	3316-3320	when	_	_	
10-83	3321-3324	the	_	_	
10-84	3325-3332	booting	_	_	
10-85	3333-3335	of	_	_	
10-86	3336-3339	the	_	_	
10-87	3340-3343	ROM	_	_	
10-88	3344-3347	has	_	_	
10-89	3348-3352	been	_	_	
10-90	3353-3362	initiated	_	_	
10-91	3362-3363	.	_	_	

#Text=The system is then set to the virtual system initialized state, and thereafter, OS#1, OS#2 and OS#3 are booted in the named order.
11-1	3364-3367	The	_	_	
11-2	3368-3374	system	_	_	
11-3	3375-3377	is	_	_	
11-4	3378-3382	then	_	_	
11-5	3383-3386	set	_	_	
11-6	3387-3389	to	_	_	
11-7	3390-3393	the	_	_	
11-8	3394-3401	virtual	_	_	
11-9	3402-3408	system	_	_	
11-10	3409-3420	initialized	_	_	
11-11	3421-3426	state	_	_	
11-12	3426-3427	,	_	_	
11-13	3428-3431	and	_	_	
11-14	3432-3442	thereafter	_	_	
11-15	3442-3443	,	_	_	
11-16	3444-3446	OS	_	_	
11-17	3446-3448	#1	_	_	
11-18	3448-3449	,	_	_	
11-19	3450-3452	OS	_	_	
11-20	3452-3454	#2	_	_	
11-21	3455-3458	and	_	_	
11-22	3459-3461	OS	_	_	
11-23	3461-3463	#3	_	_	
11-24	3464-3467	are	_	_	
11-25	3468-3474	booted	_	_	
11-26	3475-3477	in	_	_	
11-27	3478-3481	the	_	_	
11-28	3482-3487	named	_	_	
11-29	3488-3493	order	_	_	
11-30	3493-3494	.	_	_	

#Text=Since the state shifting when the individual OSs are booted is the same as when OS#1 is activated as the main OS, no further explanation will be given.
12-1	3495-3500	Since	_	_	
12-2	3501-3504	the	_	_	
12-3	3505-3510	state	_	_	
12-4	3511-3519	shifting	_	_	
12-5	3520-3524	when	_	_	
12-6	3525-3528	the	_	_	
12-7	3529-3539	individual	_	_	
12-8	3540-3543	OSs	_	_	
12-9	3544-3547	are	_	_	
12-10	3548-3554	booted	_	_	
12-11	3555-3557	is	_	_	
12-12	3558-3561	the	_	_	
12-13	3562-3566	same	_	_	
12-14	3567-3569	as	_	_	
12-15	3570-3574	when	_	_	
12-16	3575-3577	OS	_	_	
12-17	3577-3579	#1	_	_	
12-18	3580-3582	is	_	_	
12-19	3583-3592	activated	_	_	
12-20	3593-3595	as	_	_	
12-21	3596-3599	the	_	_	
12-22	3600-3604	main	_	_	
12-23	3605-3607	OS	_	_	
12-24	3607-3608	,	_	_	
12-25	3609-3611	no	_	_	
12-26	3612-3619	further	_	_	
12-27	3620-3631	explanation	_	_	
12-28	3632-3636	will	_	_	
12-29	3637-3639	be	_	_	
12-30	3640-3645	given	_	_	
12-31	3645-3646	.	_	_	
