#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|
#T_RL=webanno.custom.Diy_coref_re|BT_webanno.custom.Diy_coref


#Text=[0094] An explanation will now be given for the processing performed to activate a computer system wherein OS#1, OS#2 and OS#3 coexist.
1-1	0-1	[	_	_	
1-2	1-5	0094	_	_	
1-3	5-6	]	_	_	
1-4	7-9	An	_	_	
1-5	10-21	explanation	_	_	
1-6	22-26	will	_	_	
1-7	27-30	now	_	_	
1-8	31-33	be	_	_	
1-9	34-39	given	_	_	
1-10	40-43	for	_	_	
1-11	44-47	the	_	_	
1-12	48-58	processing	_	_	
1-13	59-68	performed	_	_	
1-14	69-71	to	_	_	
1-15	72-80	activate	_	_	
1-16	81-82	a	_	_	
1-17	83-91	computer	_	_	
1-18	92-98	system	_	_	
1-19	99-106	wherein	_	_	
1-20	107-109	OS	_	_	
1-21	109-111	#1	_	_	
1-22	111-112	,	_	_	
1-23	113-115	OS	_	_	
1-24	115-117	#2	_	_	
1-25	118-121	and	_	_	
1-26	122-124	OS	_	_	
1-27	124-126	#3	_	_	
1-28	127-134	coexist	_	_	
1-29	134-135	.	_	_	

#Text=FIG. 5 is a flowchart for explaining the processing performed to activate the computer system, and FIG. 6 is a diagram for explaining the state shifting performed when the computer system is activated.
#Text=[0095] In this embodiment, multiple OSs can coexist by loading into the independent logical memory block 400 of the memory device the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, the OS characteristic registration unit 406, and the OS boot loader registration unit 407.
2-1	136-139	FIG	_	_	
2-2	139-140	.	_	_	
2-3	141-142	5	_	_	
2-4	143-145	is	_	_	
2-5	146-147	a	_	_	
2-6	148-157	flowchart	_	_	
2-7	158-161	for	_	_	
2-8	162-172	explaining	_	_	
2-9	173-176	the	_	_	
2-10	177-187	processing	_	_	
2-11	188-197	performed	_	_	
2-12	198-200	to	_	_	
2-13	201-209	activate	_	_	
2-14	210-213	the	_	_	
2-15	214-222	computer	_	_	
2-16	223-229	system	_	_	
2-17	229-230	,	_	_	
2-18	231-234	and	_	_	
2-19	235-238	FIG	_	_	
2-20	238-239	.	_	_	
2-21	240-241	6	_	_	
2-22	242-244	is	_	_	
2-23	245-246	a	_	_	
2-24	247-254	diagram	_	_	
2-25	255-258	for	_	_	
2-26	259-269	explaining	_	_	
2-27	270-273	the	_	_	
2-28	274-279	state	_	_	
2-29	280-288	shifting	_	_	
2-30	289-298	performed	_	_	
2-31	299-303	when	_	_	
2-32	304-307	the	_	_	
2-33	308-316	computer	_	_	
2-34	317-323	system	_	_	
2-35	324-326	is	_	_	
2-36	327-336	activated	_	_	
2-37	336-337	.	_	_	
2-38	338-339	[	_	_	
2-39	339-343	0095	_	_	
2-40	343-344	]	_	_	
2-41	345-347	In	_	_	
2-42	348-352	this	_	_	
2-43	353-363	embodiment	_	_	
2-44	363-364	,	_	_	
2-45	365-373	multiple	_	_	
2-46	374-377	OSs	_	_	
2-47	378-381	can	_	_	
2-48	382-389	coexist	_	_	
2-49	390-392	by	_	_	
2-50	393-400	loading	_	_	
2-51	401-405	into	_	_	
2-52	406-409	the	_	_	
2-53	410-421	independent	_	_	
2-54	422-429	logical	_	_	
2-55	430-436	memory	_	_	
2-56	437-442	block	_	_	
2-57	443-446	400	_	_	
2-58	447-449	of	_	_	
2-59	450-453	the	_	_	
2-60	454-460	memory	_	_	
2-61	461-467	device	_	_	
2-62	468-471	the	_	_	
2-63	472-480	multi-OS	_	_	
2-64	481-495	initialization	_	_	
2-65	496-500	unit	_	_	
2-66	501-504	401	_	_	
2-67	504-505	,	_	_	
2-68	506-509	the	_	_	
2-69	510-517	virtual	_	_	
2-70	518-524	system	_	_	
2-71	525-539	initialization	_	_	
2-72	540-544	unit	_	_	
2-73	545-548	402	_	_	
2-74	548-549	,	_	_	
2-75	550-553	the	_	_	
2-76	554-561	logical	_	_	
2-77	562-568	memory	_	_	
2-78	569-577	division	_	_	
2-79	578-588	controller	_	_	
2-80	589-592	403	_	_	
2-81	592-593	,	_	_	
2-82	594-597	the	_	_	
2-83	598-605	virtual	_	_	
2-84	606-610	boot	_	_	
2-85	611-621	controller	_	_	
2-86	622-625	404	_	_	
2-87	625-626	,	_	_	
2-88	627-630	the	_	_	
2-89	631-633	OS	_	_	
2-90	634-643	switching	_	_	
2-91	644-654	controller	_	_	
2-92	655-658	405	_	_	
2-93	658-659	,	_	_	
2-94	660-663	the	_	_	
2-95	664-666	OS	_	_	
2-96	667-681	characteristic	_	_	
2-97	682-694	registration	_	_	
2-98	695-699	unit	_	_	
2-99	700-703	406	_	_	
2-100	703-704	,	_	_	
2-101	705-708	and	_	_	
2-102	709-712	the	_	_	
2-103	713-715	OS	_	_	
2-104	716-720	boot	_	_	
2-105	721-727	loader	_	_	
2-106	728-740	registration	_	_	
2-107	741-745	unit	_	_	
2-108	746-749	407	_	_	
2-109	749-750	.	_	_	

#Text=Therefore, during the first operation sequence for activation of the system, these function execution units must be loaded into the independent logical memory block 400.
3-1	751-760	Therefore	_	_	
3-2	760-761	,	_	_	
3-3	762-768	during	_	_	
3-4	769-772	the	_	_	
3-5	773-778	first	_	_	
3-6	779-788	operation	_	_	
3-7	789-797	sequence	_	_	
3-8	798-801	for	_	_	
3-9	802-812	activation	_	_	
3-10	813-815	of	_	_	
3-11	816-819	the	_	_	
3-12	820-826	system	_	_	
3-13	826-827	,	_	_	
3-14	828-833	these	_	_	
3-15	834-842	function	_	_	
3-16	843-852	execution	_	_	
3-17	853-858	units	_	_	
3-18	859-863	must	_	_	
3-19	864-866	be	_	_	
3-20	867-873	loaded	_	_	
3-21	874-878	into	_	_	
3-22	879-882	the	_	_	
3-23	883-894	independent	_	_	
3-24	895-902	logical	_	_	
3-25	903-909	memory	_	_	
3-26	910-915	block	_	_	
3-27	916-919	400	_	_	
3-28	919-920	.	_	_	

#Text=Various methods can be employed for loading these function execution units, and in this embodiment, an explanation will be given for a method for loading these units into the independent logical memory block 400, along with a specific OS, and a method for loading these units before loading the OS.
#Text=[0096] First, an explanation will be given for a method for loading the function execution units, along with a specific OS, into the independent logical memory block 400.
4-1	921-928	Various	_	_	
4-2	929-936	methods	_	_	
4-3	937-940	can	_	_	
4-4	941-943	be	_	_	
4-5	944-952	employed	_	_	
4-6	953-956	for	_	_	
4-7	957-964	loading	_	_	
4-8	965-970	these	_	_	
4-9	971-979	function	_	_	
4-10	980-989	execution	_	_	
4-11	990-995	units	_	_	
4-12	995-996	,	_	_	
4-13	997-1000	and	_	_	
4-14	1001-1003	in	_	_	
4-15	1004-1008	this	_	_	
4-16	1009-1019	embodiment	_	_	
4-17	1019-1020	,	_	_	
4-18	1021-1023	an	_	_	
4-19	1024-1035	explanation	_	_	
4-20	1036-1040	will	_	_	
4-21	1041-1043	be	_	_	
4-22	1044-1049	given	_	_	
4-23	1050-1053	for	_	_	
4-24	1054-1055	a	_	_	
4-25	1056-1062	method	_	_	
4-26	1063-1066	for	_	_	
4-27	1067-1074	loading	_	_	
4-28	1075-1080	these	_	_	
4-29	1081-1086	units	_	_	
4-30	1087-1091	into	_	_	
4-31	1092-1095	the	_	_	
4-32	1096-1107	independent	_	_	
4-33	1108-1115	logical	_	_	
4-34	1116-1122	memory	_	_	
4-35	1123-1128	block	_	_	
4-36	1129-1132	400	_	_	
4-37	1132-1133	,	_	_	
4-38	1134-1139	along	_	_	
4-39	1140-1144	with	_	_	
4-40	1145-1146	a	_	_	
4-41	1147-1155	specific	_	_	
4-42	1156-1158	OS	_	_	
4-43	1158-1159	,	_	_	
4-44	1160-1163	and	_	_	
4-45	1164-1165	a	_	_	
4-46	1166-1172	method	_	_	
4-47	1173-1176	for	_	_	
4-48	1177-1184	loading	_	_	
4-49	1185-1190	these	_	_	
4-50	1191-1196	units	_	_	
4-51	1197-1203	before	_	_	
4-52	1204-1211	loading	_	_	
4-53	1212-1215	the	_	_	
4-54	1216-1218	OS	_	_	
4-55	1218-1219	.	_	_	
4-56	1220-1221	[	_	_	
4-57	1221-1225	0096	_	_	
4-58	1225-1226	]	_	_	
4-59	1227-1232	First	_	_	
4-60	1232-1233	,	_	_	
4-61	1234-1236	an	_	_	
4-62	1237-1248	explanation	_	_	
4-63	1249-1253	will	_	_	
4-64	1254-1256	be	_	_	
4-65	1257-1262	given	_	_	
4-66	1263-1266	for	_	_	
4-67	1267-1268	a	*[1]	5-3[2_1]	
4-68	1269-1275	method	*[1]	_	
4-69	1276-1279	for	*[1]	_	
4-70	1280-1287	loading	*[1]	_	
4-71	1288-1291	the	*[1]	_	
4-72	1292-1300	function	*[1]	_	
4-73	1301-1310	execution	*[1]	_	
4-74	1311-1316	units	*[1]	_	
4-75	1316-1317	,	_	_	
4-76	1318-1323	along	_	_	
4-77	1324-1328	with	_	_	
4-78	1329-1330	a	_	_	
4-79	1331-1339	specific	_	_	
4-80	1340-1342	OS	_	_	
4-81	1342-1343	,	_	_	
4-82	1344-1348	into	_	_	
4-83	1349-1352	the	_	_	
4-84	1353-1364	independent	_	_	
4-85	1365-1372	logical	_	_	
4-86	1373-1379	memory	_	_	
4-87	1380-1385	block	_	_	
4-88	1386-1389	400	_	_	
4-89	1389-1390	.	_	_	

#Text=According to this method, the first OS that is to be booted (hereinafter referred to as a main OS) is specified when the system is activated, and programs for the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, and the OS characteristic registration unit 406 and the OS boot loader registration unit 407 are stored as files associated with the specified OS.
5-1	1391-1400	According	_	_	
5-2	1401-1403	to	_	_	
5-3	1404-1408	this	*[2]	_	
5-4	1409-1415	method	*[2]	_	
5-5	1415-1416	,	_	_	
5-6	1417-1420	the	_	_	
5-7	1421-1426	first	_	_	
5-8	1427-1429	OS	_	_	
5-9	1430-1434	that	_	_	
5-10	1435-1437	is	_	_	
5-11	1438-1440	to	_	_	
5-12	1441-1443	be	_	_	
5-13	1444-1450	booted	_	_	
5-14	1451-1452	(	_	_	
5-15	1452-1463	hereinafter	_	_	
5-16	1464-1472	referred	_	_	
5-17	1473-1475	to	_	_	
5-18	1476-1478	as	_	_	
5-19	1479-1480	a	_	_	
5-20	1481-1485	main	_	_	
5-21	1486-1488	OS	_	_	
5-22	1488-1489	)	_	_	
5-23	1490-1492	is	_	_	
5-24	1493-1502	specified	_	_	
5-25	1503-1507	when	_	_	
5-26	1508-1511	the	_	_	
5-27	1512-1518	system	_	_	
5-28	1519-1521	is	_	_	
5-29	1522-1531	activated	_	_	
5-30	1531-1532	,	_	_	
5-31	1533-1536	and	_	_	
5-32	1537-1545	programs	_	_	
5-33	1546-1549	for	_	_	
5-34	1550-1553	the	_	_	
5-35	1554-1562	multi-OS	_	_	
5-36	1563-1577	initialization	_	_	
5-37	1578-1582	unit	_	_	
5-38	1583-1586	401	_	_	
5-39	1586-1587	,	_	_	
5-40	1588-1591	the	_	_	
5-41	1592-1599	virtual	_	_	
5-42	1600-1606	system	_	_	
5-43	1607-1621	initialization	_	_	
5-44	1622-1626	unit	_	_	
5-45	1627-1630	402	_	_	
5-46	1630-1631	,	_	_	
5-47	1632-1635	the	_	_	
5-48	1636-1643	logical	_	_	
5-49	1644-1650	memory	_	_	
5-50	1651-1659	division	_	_	
5-51	1660-1670	controller	_	_	
5-52	1671-1674	403	_	_	
5-53	1674-1675	,	_	_	
5-54	1676-1679	the	_	_	
5-55	1680-1687	virtual	_	_	
5-56	1688-1692	boot	_	_	
5-57	1693-1703	controller	_	_	
5-58	1704-1707	404	_	_	
5-59	1707-1708	,	_	_	
5-60	1709-1712	the	_	_	
5-61	1713-1715	OS	_	_	
5-62	1716-1725	switching	_	_	
5-63	1726-1736	controller	_	_	
5-64	1737-1740	405	_	_	
5-65	1740-1741	,	_	_	
5-66	1742-1745	and	_	_	
5-67	1746-1749	the	_	_	
5-68	1750-1752	OS	_	_	
5-69	1753-1767	characteristic	_	_	
5-70	1768-1780	registration	_	_	
5-71	1781-1785	unit	_	_	
5-72	1786-1789	406	_	_	
5-73	1790-1793	and	_	_	
5-74	1794-1797	the	_	_	
5-75	1798-1800	OS	_	_	
5-76	1801-1805	boot	_	_	
5-77	1806-1812	loader	_	_	
5-78	1813-1825	registration	_	_	
5-79	1826-1830	unit	_	_	
5-80	1831-1834	407	_	_	
5-81	1835-1838	are	_	_	
5-82	1839-1845	stored	_	_	
5-83	1846-1848	as	_	_	
5-84	1849-1854	files	_	_	
5-85	1855-1865	associated	_	_	
5-86	1866-1870	with	_	_	
5-87	1871-1874	the	_	_	
5-88	1875-1884	specified	_	_	
5-89	1885-1887	OS	_	_	
5-90	1887-1888	.	_	_	

#Text=When the pertinent OS is booted, these function execution units are loaded together.
6-1	1889-1893	When	_	_	
6-2	1894-1897	the	_	_	
6-3	1898-1907	pertinent	_	_	
6-4	1908-1910	OS	_	_	
6-5	1911-1913	is	_	_	
6-6	1914-1920	booted	_	_	
6-7	1920-1921	,	_	_	
6-8	1922-1927	these	_	_	
6-9	1928-1936	function	_	_	
6-10	1937-1946	execution	_	_	
6-11	1947-1952	units	_	_	
6-12	1953-1956	are	_	_	
6-13	1957-1963	loaded	_	_	
6-14	1964-1972	together	_	_	
6-15	1972-1973	.	_	_	

#Text=In this case, the activation of the second and the following OSs, including the management of their memory areas, is performed by the multi-OS initialization unit 401, the virtual system initialization unit 402, the logical memory division controller 403, the virtual boot controller 404, the OS switching controller 405, the OS characteristic registration unit 406 and the OS boot loader registration unit 407.
7-1	1974-1976	In	_	_	
7-2	1977-1981	this	_	_	
7-3	1982-1986	case	_	_	
7-4	1986-1987	,	_	_	
7-5	1988-1991	the	_	_	
7-6	1992-2002	activation	_	_	
7-7	2003-2005	of	_	_	
7-8	2006-2009	the	_	_	
7-9	2010-2016	second	_	_	
7-10	2017-2020	and	_	_	
7-11	2021-2024	the	_	_	
7-12	2025-2034	following	_	_	
7-13	2035-2038	OSs	_	_	
7-14	2038-2039	,	_	_	
7-15	2040-2049	including	_	_	
7-16	2050-2053	the	_	_	
7-17	2054-2064	management	_	_	
7-18	2065-2067	of	_	_	
7-19	2068-2073	their	_	_	
7-20	2074-2080	memory	_	_	
7-21	2081-2086	areas	_	_	
7-22	2086-2087	,	_	_	
7-23	2088-2090	is	_	_	
7-24	2091-2100	performed	_	_	
7-25	2101-2103	by	_	_	
7-26	2104-2107	the	_	_	
7-27	2108-2116	multi-OS	_	_	
7-28	2117-2131	initialization	_	_	
7-29	2132-2136	unit	_	_	
7-30	2137-2140	401	_	_	
7-31	2140-2141	,	_	_	
7-32	2142-2145	the	_	_	
7-33	2146-2153	virtual	_	_	
7-34	2154-2160	system	_	_	
7-35	2161-2175	initialization	_	_	
7-36	2176-2180	unit	_	_	
7-37	2181-2184	402	_	_	
7-38	2184-2185	,	_	_	
7-39	2186-2189	the	_	_	
7-40	2190-2197	logical	_	_	
7-41	2198-2204	memory	_	_	
7-42	2205-2213	division	_	_	
7-43	2214-2224	controller	_	_	
7-44	2225-2228	403	_	_	
7-45	2228-2229	,	_	_	
7-46	2230-2233	the	_	_	
7-47	2234-2241	virtual	_	_	
7-48	2242-2246	boot	_	_	
7-49	2247-2257	controller	_	_	
7-50	2258-2261	404	_	_	
7-51	2261-2262	,	_	_	
7-52	2263-2266	the	_	_	
7-53	2267-2269	OS	_	_	
7-54	2270-2279	switching	_	_	
7-55	2280-2290	controller	_	_	
7-56	2291-2294	405	_	_	
7-57	2294-2295	,	_	_	
7-58	2296-2299	the	_	_	
7-59	2300-2302	OS	_	_	
7-60	2303-2317	characteristic	_	_	
7-61	2318-2330	registration	_	_	
7-62	2331-2335	unit	_	_	
7-63	2336-2339	406	_	_	
7-64	2340-2343	and	_	_	
7-65	2344-2347	the	_	_	
7-66	2348-2350	OS	_	_	
7-67	2351-2355	boot	_	_	
7-68	2356-2362	loader	_	_	
7-69	2363-2375	registration	_	_	
7-70	2376-2380	unit	_	_	
7-71	2381-2384	407	_	_	
7-72	2384-2385	.	_	_	

#Text=Therefore, the memory areas allocated for the second and the following OSs that are to be activated need not correspond to the configuration for the coexistence of the OSs according to the embodiment.
8-1	2386-2395	Therefore	_	_	
8-2	2395-2396	,	_	_	
8-3	2397-2400	the	_	_	
8-4	2401-2407	memory	_	_	
8-5	2408-2413	areas	_	_	
8-6	2414-2423	allocated	_	_	
8-7	2424-2427	for	_	_	
8-8	2428-2431	the	_	_	
8-9	2432-2438	second	_	_	
8-10	2439-2442	and	_	_	
8-11	2443-2446	the	_	_	
8-12	2447-2456	following	_	_	
8-13	2457-2460	OSs	_	_	
8-14	2461-2465	that	_	_	
8-15	2466-2469	are	_	_	
8-16	2470-2472	to	_	_	
8-17	2473-2475	be	_	_	
8-18	2476-2485	activated	_	_	
8-19	2486-2490	need	_	_	
8-20	2491-2494	not	_	_	
8-21	2495-2505	correspond	_	_	
8-22	2506-2508	to	_	_	
8-23	2509-2512	the	_	_	
8-24	2513-2526	configuration	_	_	
8-25	2527-2530	for	_	_	
8-26	2531-2534	the	_	_	
8-27	2535-2546	coexistence	_	_	
8-28	2547-2549	of	_	_	
8-29	2550-2553	the	_	_	
8-30	2554-2557	OSs	_	_	
8-31	2558-2567	according	_	_	
8-32	2568-2570	to	_	_	
8-33	2571-2574	the	_	_	
8-34	2575-2585	embodiment	_	_	
8-35	2585-2586	.	_	_	

#Text=However, since the main OS is activated before the multi-OS initialization unit 401, the virtual system initialization unit 402 and the logical memory division controller 403 are loaded into the independent logical memory block 400, the main OS must recognize the allocated memory area and the processing performed to shift the right of control to the multi-OS initialization unit 401 after the main OS has been activated, and for shifting the main OS to the halted state.
#Text=[0097] The processing performed when the system is activated will now be explained while referring to FIGS. 5 and 6.
9-1	2587-2594	However	_	_	
9-2	2594-2595	,	_	_	
9-3	2596-2601	since	_	_	
9-4	2602-2605	the	_	_	
9-5	2606-2610	main	_	_	
9-6	2611-2613	OS	_	_	
9-7	2614-2616	is	_	_	
9-8	2617-2626	activated	_	_	
9-9	2627-2633	before	_	_	
9-10	2634-2637	the	_	_	
9-11	2638-2646	multi-OS	_	_	
9-12	2647-2661	initialization	_	_	
9-13	2662-2666	unit	_	_	
9-14	2667-2670	401	_	_	
9-15	2670-2671	,	_	_	
9-16	2672-2675	the	_	_	
9-17	2676-2683	virtual	_	_	
9-18	2684-2690	system	_	_	
9-19	2691-2705	initialization	_	_	
9-20	2706-2710	unit	_	_	
9-21	2711-2714	402	_	_	
9-22	2715-2718	and	_	_	
9-23	2719-2722	the	_	_	
9-24	2723-2730	logical	_	_	
9-25	2731-2737	memory	_	_	
9-26	2738-2746	division	_	_	
9-27	2747-2757	controller	_	_	
9-28	2758-2761	403	_	_	
9-29	2762-2765	are	_	_	
9-30	2766-2772	loaded	_	_	
9-31	2773-2777	into	_	_	
9-32	2778-2781	the	_	_	
9-33	2782-2793	independent	_	_	
9-34	2794-2801	logical	_	_	
9-35	2802-2808	memory	_	_	
9-36	2809-2814	block	_	_	
9-37	2815-2818	400	_	_	
9-38	2818-2819	,	_	_	
9-39	2820-2823	the	_	_	
9-40	2824-2828	main	_	_	
9-41	2829-2831	OS	_	_	
9-42	2832-2836	must	_	_	
9-43	2837-2846	recognize	_	_	
9-44	2847-2850	the	_	_	
9-45	2851-2860	allocated	_	_	
9-46	2861-2867	memory	_	_	
9-47	2868-2872	area	_	_	
9-48	2873-2876	and	_	_	
9-49	2877-2880	the	_	_	
9-50	2881-2891	processing	_	_	
9-51	2892-2901	performed	_	_	
9-52	2902-2904	to	_	_	
9-53	2905-2910	shift	_	_	
9-54	2911-2914	the	_	_	
9-55	2915-2920	right	_	_	
9-56	2921-2923	of	_	_	
9-57	2924-2931	control	_	_	
9-58	2932-2934	to	_	_	
9-59	2935-2938	the	_	_	
9-60	2939-2947	multi-OS	_	_	
9-61	2948-2962	initialization	_	_	
9-62	2963-2967	unit	_	_	
9-63	2968-2971	401	_	_	
9-64	2972-2977	after	_	_	
9-65	2978-2981	the	_	_	
9-66	2982-2986	main	_	_	
9-67	2987-2989	OS	_	_	
9-68	2990-2993	has	_	_	
9-69	2994-2998	been	_	_	
9-70	2999-3008	activated	_	_	
9-71	3008-3009	,	_	_	
9-72	3010-3013	and	_	_	
9-73	3014-3017	for	_	_	
9-74	3018-3026	shifting	_	_	
9-75	3027-3030	the	_	_	
9-76	3031-3035	main	_	_	
9-77	3036-3038	OS	_	_	
9-78	3039-3041	to	_	_	
9-79	3042-3045	the	_	_	
9-80	3046-3052	halted	_	_	
9-81	3053-3058	state	_	_	
9-82	3058-3059	.	_	_	
9-83	3060-3061	[	_	_	
9-84	3061-3065	0097	_	_	
9-85	3065-3066	]	_	_	
9-86	3067-3070	The	_	_	
9-87	3071-3081	processing	_	_	
9-88	3082-3091	performed	_	_	
9-89	3092-3096	when	_	_	
9-90	3097-3100	the	_	_	
9-91	3101-3107	system	_	_	
9-92	3108-3110	is	_	_	
9-93	3111-3120	activated	_	_	
9-94	3121-3125	will	_	_	
9-95	3126-3129	now	_	_	
9-96	3130-3132	be	_	_	
9-97	3133-3142	explained	_	_	
9-98	3143-3148	while	_	_	
9-99	3149-3158	referring	_	_	
9-100	3159-3161	to	_	_	
9-101	3162-3166	FIGS	_	_	
9-102	3166-3167	.	_	_	
9-103	3168-3169	5	_	_	
9-104	3170-3173	and	_	_	
9-105	3174-3175	6	_	_	
9-106	3175-3176	.	_	_	

#Text=In this embodiment, OS#1 is first activated as the main OS.
10-1	3177-3179	In	_	_	
10-2	3180-3184	this	_	_	
10-3	3185-3195	embodiment	_	_	
10-4	3195-3196	,	_	_	
10-5	3197-3199	OS	_	_	
10-6	3199-3201	#1	_	_	
10-7	3202-3204	is	_	_	
10-8	3205-3210	first	_	_	
10-9	3211-3220	activated	_	_	
10-10	3221-3223	as	_	_	
10-11	3224-3227	the	_	_	
10-12	3228-3232	main	_	_	
10-13	3233-3235	OS	_	_	
10-14	3235-3236	.	_	_	

#Text=In the schematic flowchart in FIG. 5 showing the processing performed when the system is activated, when the main OS is booted (steps 501 and 502), a check is performed to determine whether there is another OS to be booted (steps 503 and 504).
11-1	3237-3239	In	_	_	
11-2	3240-3243	the	_	_	
11-3	3244-3253	schematic	_	_	
11-4	3254-3263	flowchart	_	_	
11-5	3264-3266	in	_	_	
11-6	3267-3270	FIG	_	_	
11-7	3270-3271	.	_	_	
11-8	3272-3273	5	_	_	
11-9	3274-3281	showing	_	_	
11-10	3282-3285	the	_	_	
11-11	3286-3296	processing	_	_	
11-12	3297-3306	performed	_	_	
11-13	3307-3311	when	_	_	
11-14	3312-3315	the	_	_	
11-15	3316-3322	system	_	_	
11-16	3323-3325	is	_	_	
11-17	3326-3335	activated	_	_	
11-18	3335-3336	,	_	_	
11-19	3337-3341	when	_	_	
11-20	3342-3345	the	_	_	
11-21	3346-3350	main	_	_	
11-22	3351-3353	OS	_	_	
11-23	3354-3356	is	_	_	
11-24	3357-3363	booted	_	_	
11-25	3364-3365	(	_	_	
11-26	3365-3370	steps	_	_	
11-27	3371-3374	501	_	_	
11-28	3375-3378	and	_	_	
11-29	3379-3382	502	_	_	
11-30	3382-3383	)	_	_	
11-31	3383-3384	,	_	_	
11-32	3385-3386	a	_	_	
11-33	3387-3392	check	_	_	
11-34	3393-3395	is	_	_	
11-35	3396-3405	performed	_	_	
11-36	3406-3408	to	_	_	
11-37	3409-3418	determine	_	_	
11-38	3419-3426	whether	_	_	
11-39	3427-3432	there	_	_	
11-40	3433-3435	is	_	_	
11-41	3436-3443	another	_	_	
11-42	3444-3446	OS	_	_	
11-43	3447-3449	to	_	_	
11-44	3450-3452	be	_	_	
11-45	3453-3459	booted	_	_	
11-46	3460-3461	(	_	_	
11-47	3461-3466	steps	_	_	
11-48	3467-3470	503	_	_	
11-49	3471-3474	and	_	_	
11-50	3475-3478	504	_	_	
11-51	3478-3479	)	_	_	
11-52	3479-3480	.	_	_	

#Text=If there are other OSs, an OS to be booted next is designated (step 505), and a logical memory block for loading the OS is designated (step 506).
12-1	3481-3483	If	_	_	
12-2	3484-3489	there	_	_	
12-3	3490-3493	are	_	_	
12-4	3494-3499	other	_	_	
12-5	3500-3503	OSs	_	_	
12-6	3503-3504	,	_	_	
12-7	3505-3507	an	_	_	
12-8	3508-3510	OS	_	_	
12-9	3511-3513	to	_	_	
12-10	3514-3516	be	_	_	
12-11	3517-3523	booted	_	_	
12-12	3524-3528	next	_	_	
12-13	3529-3531	is	_	_	
12-14	3532-3542	designated	_	_	
12-15	3543-3544	(	_	_	
12-16	3544-3548	step	_	_	
12-17	3549-3552	505	_	_	
12-18	3552-3553	)	_	_	
12-19	3553-3554	,	_	_	
12-20	3555-3558	and	_	_	
12-21	3559-3560	a	_	_	
12-22	3561-3568	logical	_	_	
12-23	3569-3575	memory	_	_	
12-24	3576-3581	block	_	_	
12-25	3582-3585	for	_	_	
12-26	3586-3593	loading	_	_	
12-27	3594-3597	the	_	_	
12-28	3598-3600	OS	_	_	
12-29	3601-3603	is	_	_	
12-30	3604-3614	designated	_	_	
12-31	3615-3616	(	_	_	
12-32	3616-3620	step	_	_	
12-33	3621-3624	506	_	_	
12-34	3624-3625	)	_	_	
12-35	3625-3626	.	_	_	

#Text=Then, the OS that is currently running is suspended (step 507), and the location in the secondary storage device, whereat the boot loader of the next OS is stored, is specified (step 508) and the booting is initiated (step 509).
13-1	3627-3631	Then	_	_	
13-2	3631-3632	,	_	_	
13-3	3633-3636	the	_	_	
13-4	3637-3639	OS	_	_	
13-5	3640-3644	that	_	_	
13-6	3645-3647	is	_	_	
13-7	3648-3657	currently	_	_	
13-8	3658-3665	running	_	_	
13-9	3666-3668	is	_	_	
13-10	3669-3678	suspended	_	_	
13-11	3679-3680	(	_	_	
13-12	3680-3684	step	_	_	
13-13	3685-3688	507	_	_	
13-14	3688-3689	)	_	_	
13-15	3689-3690	,	_	_	
13-16	3691-3694	and	_	_	
13-17	3695-3698	the	_	_	
13-18	3699-3707	location	_	_	
13-19	3708-3710	in	_	_	
13-20	3711-3714	the	_	_	
13-21	3715-3724	secondary	_	_	
13-22	3725-3732	storage	_	_	
13-23	3733-3739	device	_	_	
13-24	3739-3740	,	_	_	
13-25	3741-3748	whereat	_	_	
13-26	3749-3752	the	_	_	
13-27	3753-3757	boot	_	_	
13-28	3758-3764	loader	_	_	
13-29	3765-3767	of	_	_	
13-30	3768-3771	the	_	_	
13-31	3772-3776	next	_	_	
13-32	3777-3779	OS	_	_	
13-33	3780-3782	is	_	_	
13-34	3783-3789	stored	_	_	
13-35	3789-3790	,	_	_	
13-36	3791-3793	is	_	_	
13-37	3794-3803	specified	_	_	
13-38	3804-3805	(	_	_	
13-39	3805-3809	step	_	_	
13-40	3810-3813	508	_	_	
13-41	3813-3814	)	_	_	
13-42	3815-3818	and	_	_	
13-43	3819-3822	the	_	_	
13-44	3823-3830	booting	_	_	
13-45	3831-3833	is	_	_	
13-46	3834-3843	initiated	_	_	
13-47	3844-3845	(	_	_	
13-48	3845-3849	step	_	_	
13-49	3850-3853	509	_	_	
13-50	3853-3854	)	_	_	
13-51	3854-3855	.	_	_	

#Text=Thereafter, the process from step 503 to step 509 is repeated until all the coexisting OSs in the system have been booted.
14-1	3856-3866	Thereafter	_	_	
14-2	3866-3867	,	_	_	
14-3	3868-3871	the	_	_	
14-4	3872-3879	process	_	_	
14-5	3880-3884	from	_	_	
14-6	3885-3889	step	_	_	
14-7	3890-3893	503	_	_	
14-8	3894-3896	to	_	_	
14-9	3897-3901	step	_	_	
14-10	3902-3905	509	_	_	
14-11	3906-3908	is	_	_	
14-12	3909-3917	repeated	_	_	
14-13	3918-3923	until	_	_	
14-14	3924-3927	all	_	_	
14-15	3928-3931	the	_	_	
14-16	3932-3942	coexisting	_	_	
14-17	3943-3946	OSs	_	_	
14-18	3947-3949	in	_	_	
14-19	3950-3953	the	_	_	
14-20	3954-3960	system	_	_	
14-21	3961-3965	have	_	_	
14-22	3966-3970	been	_	_	
14-23	3971-3977	booted	_	_	
14-24	3977-3978	.	_	_	

#Text=When all the coexisting OSs in the system have been booted, the currently operating OS continues to run until a request is issued to change from the pertinent OS to another OS, or until an end command is issued (steps 510, 511 and 512).
#Text=[0098] This processing will be specifically explained while referring to the state shifting diagram in FIG. 6.
15-1	3979-3983	When	_	_	
15-2	3984-3987	all	_	_	
15-3	3988-3991	the	_	_	
15-4	3992-4002	coexisting	_	_	
15-5	4003-4006	OSs	_	_	
15-6	4007-4009	in	_	_	
15-7	4010-4013	the	_	_	
15-8	4014-4020	system	_	_	
15-9	4021-4025	have	_	_	
15-10	4026-4030	been	_	_	
15-11	4031-4037	booted	_	_	
15-12	4037-4038	,	_	_	
15-13	4039-4042	the	_	_	
15-14	4043-4052	currently	_	_	
15-15	4053-4062	operating	_	_	
15-16	4063-4065	OS	_	_	
15-17	4066-4075	continues	_	_	
15-18	4076-4078	to	_	_	
15-19	4079-4082	run	_	_	
15-20	4083-4088	until	_	_	
15-21	4089-4090	a	_	_	
15-22	4091-4098	request	_	_	
15-23	4099-4101	is	_	_	
15-24	4102-4108	issued	_	_	
15-25	4109-4111	to	_	_	
15-26	4112-4118	change	_	_	
15-27	4119-4123	from	_	_	
15-28	4124-4127	the	_	_	
15-29	4128-4137	pertinent	_	_	
15-30	4138-4140	OS	_	_	
15-31	4141-4143	to	_	_	
15-32	4144-4151	another	_	_	
15-33	4152-4154	OS	_	_	
15-34	4154-4155	,	_	_	
15-35	4156-4158	or	_	_	
15-36	4159-4164	until	_	_	
15-37	4165-4167	an	_	_	
15-38	4168-4171	end	_	_	
15-39	4172-4179	command	_	_	
15-40	4180-4182	is	_	_	
15-41	4183-4189	issued	_	_	
15-42	4190-4191	(	_	_	
15-43	4191-4196	steps	_	_	
15-44	4197-4200	510	_	_	
15-45	4200-4201	,	_	_	
15-46	4202-4205	511	_	_	
15-47	4206-4209	and	_	_	
15-48	4210-4213	512	_	_	
15-49	4213-4214	)	_	_	
15-50	4214-4215	.	_	_	
15-51	4216-4217	[	_	_	
15-52	4217-4221	0098	_	_	
15-53	4221-4222	]	_	_	
15-54	4223-4227	This	_	_	
15-55	4228-4238	processing	_	_	
15-56	4239-4243	will	_	_	
15-57	4244-4246	be	_	_	
15-58	4247-4259	specifically	_	_	
15-59	4260-4269	explained	_	_	
15-60	4270-4275	while	_	_	
15-61	4276-4285	referring	_	_	
15-62	4286-4288	to	_	_	
15-63	4289-4292	the	_	_	
15-64	4293-4298	state	_	_	
15-65	4299-4307	shifting	_	_	
15-66	4308-4315	diagram	_	_	
15-67	4316-4318	in	_	_	
15-68	4319-4322	FIG	_	_	
15-69	4322-4323	.	_	_	
15-70	4324-4325	6	_	_	
15-71	4325-4326	.	_	_	

#Text=First, when the system is powered on and the booting of the ROM is initiated, the ROM code loads an MBR (Master Boot Record) to begin the booting of the main OS, OS#1 (see 601).
16-1	4327-4332	First	_	_	
16-2	4332-4333	,	_	_	
16-3	4334-4338	when	_	_	
16-4	4339-4342	the	_	_	
16-5	4343-4349	system	_	_	
16-6	4350-4352	is	_	_	
16-7	4353-4360	powered	_	_	
16-8	4361-4363	on	_	_	
16-9	4364-4367	and	_	_	
16-10	4368-4371	the	_	_	
16-11	4372-4379	booting	_	_	
16-12	4380-4382	of	_	_	
16-13	4383-4386	the	_	_	
16-14	4387-4390	ROM	_	_	
16-15	4391-4393	is	_	_	
16-16	4394-4403	initiated	_	_	
16-17	4403-4404	,	_	_	
16-18	4405-4408	the	_	_	
16-19	4409-4412	ROM	_	_	
16-20	4413-4417	code	_	_	
16-21	4418-4423	loads	_	_	
16-22	4424-4426	an	_	_	
16-23	4427-4430	MBR	_	_	
16-24	4431-4432	(	_	_	
16-25	4432-4438	Master	_	_	
16-26	4439-4443	Boot	_	_	
16-27	4444-4450	Record	_	_	
16-28	4450-4451	)	_	_	
16-29	4452-4454	to	_	_	
16-30	4455-4460	begin	_	_	
16-31	4461-4464	the	_	_	
16-32	4465-4472	booting	_	_	
16-33	4473-4475	of	_	_	
16-34	4476-4479	the	_	_	
16-35	4480-4484	main	_	_	
16-36	4485-4487	OS	_	_	
16-37	4487-4488	,	_	_	
16-38	4489-4491	OS	_	_	
16-39	4491-4493	#1	_	_	
16-40	4494-4495	(	_	_	
16-41	4495-4498	see	_	_	
16-42	4499-4502	601	_	_	
16-43	4502-4503	)	_	_	
16-44	4503-4504	.	_	_	

#Text=As is described above, since the main OS, OS#1, recognizes the memory area allocated for OS#1, OS#1 is automatically loaded to the pertinent memory area (the OS#1 logical memory block 410 in FIG. 4).
17-1	4505-4507	As	_	_	
17-2	4508-4510	is	_	_	
17-3	4511-4520	described	_	_	
17-4	4521-4526	above	_	_	
17-5	4526-4527	,	_	_	
17-6	4528-4533	since	_	_	
17-7	4534-4537	the	_	_	
17-8	4538-4542	main	_	_	
17-9	4543-4545	OS	_	_	
17-10	4545-4546	,	_	_	
17-11	4547-4549	OS	_	_	
17-12	4549-4551	#1	_	_	
17-13	4551-4552	,	_	_	
17-14	4553-4563	recognizes	_	_	
17-15	4564-4567	the	_	_	
17-16	4568-4574	memory	_	_	
17-17	4575-4579	area	_	_	
17-18	4580-4589	allocated	_	_	
17-19	4590-4593	for	_	_	
17-20	4594-4596	OS	_	_	
17-21	4596-4598	#1	_	_	
17-22	4598-4599	,	_	_	
17-23	4600-4602	OS	_	_	
17-24	4602-4604	#1	_	_	
17-25	4605-4607	is	_	_	
17-26	4608-4621	automatically	_	_	
17-27	4622-4628	loaded	_	_	
17-28	4629-4631	to	_	_	
17-29	4632-4635	the	_	_	
17-30	4636-4645	pertinent	_	_	
17-31	4646-4652	memory	_	_	
17-32	4653-4657	area	_	_	
17-33	4658-4659	(	_	_	
17-34	4659-4662	the	_	_	
17-35	4663-4665	OS	_	_	
17-36	4665-4667	#1	_	_	
17-37	4668-4675	logical	_	_	
17-38	4676-4682	memory	_	_	
17-39	4683-4688	block	_	_	
17-40	4689-4692	410	_	_	
17-41	4693-4695	in	_	_	
17-42	4696-4699	FIG	_	_	
17-43	4699-4700	.	_	_	
17-44	4701-4702	4	_	_	
17-45	4702-4703	)	_	_	
17-46	4703-4704	.	_	_	
