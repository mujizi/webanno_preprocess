FIGS. 15-17 are flowcharts illustrating the operation of the vision-tracking system of the present invention. These flowcharts are generally self-explanatory, but some additional description is provided here. FIG. 15 shows the high-level method for determining the user's point of regard according to the present invention. Referring to FIG. 15, after an eye image is acquired, a procedure locates the pupil's position. If the pupil's centroid (in x,y image coordinates) has been located, then the pupil's location as determined in image coordinates is mapped into a corresponding location in screen coordinates (corresponding, for example, to the user's point of regard on a display screen). If the pupil is not found for the eye image frame currently being processed, then the comparison restraints are relaxed and another eye image is acquired and digitized for processing.
Once the pupil's screen location has been determined as above, the screen coordinates are sent to the user interface to provide feedback to the user. For example, these coordinates may be used to display a cursor on a display screen with the position of the cursor corresponding to the point of regard of the user's eye as determined by the eye-tracking system. As discussed above, after each successful pupil blob selection, the statistics for the user's pupil blob are updated.
FIG. 16 illustrates the pupil location process of FIG. 15 in greater detail and this process begins by accepting digitized pixel data for the eye image. Next, an image thresholding process, which is shown in greater detail in FIG. 17 and discussed below, returns an intensity threshold for the current pixel image. This threshold defines a binary image which is used to construct pixel image blobs as discussed above. Then, a counter MISS is initialized to zero, and blob statistics (for example, area and length-to-width ratio) are determined for each of the defined blobs. Each blob's statistics are compared to the respective running averages for previously-selected pupil blobs to determine a difference error. If this error is less than the pre-determined tolerance, say 10%, and MISS is greater than zero, then MISS is decremented by one. If MISS equals zero, then the comparison tolerances are tightened to their baseline values, as discussed above. The baseline tolerance values are, for example, a blob area within 10% of the running average blob area and an eccentricity within 5% of the running average blob eccentricity. If these tolerances are already at their baseline values, they are unchanged. The centroid for the selected pupil blob is then stored as the pupil's location in image coordinates. On the other hand, if the calculated difference error is not less than the percentage tolerance, then MISS is incremented by one. If MISS equals a pre-determined UPPER LIMIT, then the comparison constraints are relaxed as discussed above, and a new eye image is acquired.
In some cases the pupil location method fails to select a pupil blob because one or more of the blob statistics are not within the maximum tolerance limits. In these cases, it is unlikely that the pupil will be re-acquired by the eye-tracking system, and the pupil location method returns an error message to the system (this occurs when MISS is greater than or equal to a pre-determined value MAXIMUM LIMIT, which may have a value of say 8). A typical response to this error message would be recalibration of the system by the user.
FIG. 17 illustrates the image thresholding method according to the present invention. First, a histogram is created for the pixels in the current eye image, as discussed above. A constant "DESIRED.sub.-- AREA" is set equal to the expected pupil size, an index counter X is set to zero, and a variable "AREA.sub.-- FOUND" is set to zero. Counter X corresponds to the current bin of the histogram (e.g. 0<X<127 as in FIG. 5), and variable AREA.sub.-- FOUND accumulates the total histogram area for all histograms traversed thus far in the current process. For the first histogram bin (X=0), if AREA.sub.-- FOUND is less than DESIRED.sub.-- AREA, then the pixel area of the first histogram bin is added to AREA.sub.-- FOUND, and X is incremented by one to select the next histogram bin. Each consecutive histogram bin is traversed by incrementing X until AREA.sub.-- FOUND is greater than or equal to DESIRED.sub.-- AREA at which point the intensity threshold level is determined by the value of X.