#FORMAT=WebAnno TSV 3.2
#T_SP=webanno.custom.Diy_coref|


#Text=[0183] 2.
1-1	0-1	[	_	
1-2	1-5	0183	_	
1-3	5-6	]	_	
1-4	7-8	2	_	
1-5	8-9	.	_	

#Text=Hot-Cold data Binary block sorting (implicit implementation of the Block level TS)--no need to model [0184] Each Binary block is listed in the UB info in time allocation order for new data update blocks.
2-1	10-18	Hot-Cold	_	
2-2	19-23	data	_	
2-3	24-30	Binary	_	
2-4	31-36	block	_	
2-5	37-44	sorting	_	
2-6	45-46	(	_	
2-7	46-54	implicit	_	
2-8	55-69	implementation	_	
2-9	70-72	of	_	
2-10	73-76	the	_	
2-11	77-82	Block	_	
2-12	83-88	level	_	
2-13	89-91	TS	_	
2-14	91-92	)	_	
2-15	92-93	-	_	
2-16	93-94	-	_	
2-17	94-96	no	_	
2-18	97-101	need	_	
2-19	102-104	to	_	
2-20	105-110	model	_	
2-21	111-112	[	_	
2-22	112-116	0184	_	
2-23	116-117	]	_	
2-24	118-122	Each	_	
2-25	123-129	Binary	_	
2-26	130-135	block	_	
2-27	136-138	is	_	
2-28	139-145	listed	_	
2-29	146-148	in	_	
2-30	149-152	the	_	
2-31	153-155	UB	_	
2-32	156-160	info	_	
2-33	161-163	in	_	
2-34	164-168	time	_	
2-35	169-179	allocation	_	
2-36	180-185	order	_	
2-37	186-189	for	_	
2-38	190-193	new	_	
2-39	194-198	data	_	
2-40	199-205	update	_	
2-41	206-212	blocks	_	
2-42	212-213	.	_	

#Text=Equivalent to TS being the same for all logical groups written for the block. [0185] During compaction, the new block's position in the list is chosen approximately according to the source block locations.
3-1	214-224	Equivalent	_	
3-2	225-227	to	_	
3-3	228-230	TS	_	
3-4	231-236	being	_	
3-5	237-240	the	_	
3-6	241-245	same	_	
3-7	246-249	for	_	
3-8	250-253	all	_	
3-9	254-261	logical	_	
3-10	262-268	groups	_	
3-11	269-276	written	_	
3-12	277-280	for	_	
3-13	281-284	the	_	
3-14	285-290	block	_	
3-15	290-291	.	_	
3-16	292-293	[	_	
3-17	293-297	0185	_	
3-18	297-298	]	_	
3-19	299-305	During	_	
3-20	306-316	compaction	_	
3-21	316-317	,	_	
3-22	318-321	the	_	
3-23	322-325	new	_	
3-24	326-333	block's	_	
3-25	334-342	position	_	
3-26	343-345	in	_	
3-27	346-349	the	_	
3-28	350-354	list	_	
3-29	355-357	is	_	
3-30	358-364	chosen	_	
3-31	365-378	approximately	_	
3-32	379-388	according	_	
3-33	389-391	to	_	
3-34	392-395	the	_	
3-35	396-402	source	_	
3-36	403-408	block	_	
3-37	409-418	locations	_	
3-38	418-419	.	_	

#Text=In other words, the new block has approximately the same temperature as the source block. [0186] During compaction TS is approximated on the basis of TSs in the source blocks [0187] Logical groups from the block at the end of the list get evicted [0188] The advantages are that it has no extra records, no overflow, no increments etc.
4-1	420-422	In	_	
4-2	423-428	other	_	
4-3	429-434	words	_	
4-4	434-435	,	_	
4-5	436-439	the	_	
4-6	440-443	new	_	
4-7	444-449	block	_	
4-8	450-453	has	_	
4-9	454-467	approximately	_	
4-10	468-471	the	_	
4-11	472-476	same	_	
4-12	477-488	temperature	_	
4-13	489-491	as	_	
4-14	492-495	the	_	
4-15	496-502	source	_	
4-16	503-508	block	_	
4-17	508-509	.	_	
4-18	510-511	[	_	
4-19	511-515	0186	_	
4-20	515-516	]	_	
4-21	517-523	During	_	
4-22	524-534	compaction	_	
4-23	535-537	TS	_	
4-24	538-540	is	_	
4-25	541-553	approximated	_	
4-26	554-556	on	_	
4-27	557-560	the	_	
4-28	561-566	basis	_	
4-29	567-569	of	_	
4-30	570-573	TSs	_	
4-31	574-576	in	_	
4-32	577-580	the	_	
4-33	581-587	source	_	
4-34	588-594	blocks	_	
4-35	595-596	[	_	
4-36	596-600	0187	_	
4-37	600-601	]	_	
4-38	602-609	Logical	_	
4-39	610-616	groups	_	
4-40	617-621	from	_	
4-41	622-625	the	_	
4-42	626-631	block	_	
4-43	632-634	at	_	
4-44	635-638	the	_	
4-45	639-642	end	_	
4-46	643-645	of	_	
4-47	646-649	the	_	
4-48	650-654	list	_	
4-49	655-658	get	_	
4-50	659-666	evicted	_	
4-51	667-668	[	_	
4-52	668-672	0188	_	
4-53	672-673	]	_	
4-54	674-677	The	_	
4-55	678-688	advantages	_	
4-56	689-692	are	_	
4-57	693-697	that	_	
4-58	698-700	it	_	
4-59	701-704	has	_	
4-60	705-707	no	_	
4-61	708-713	extra	_	
4-62	714-721	records	_	
4-63	721-722	,	_	
4-64	723-725	no	_	
4-65	726-734	overflow	_	
4-66	734-735	,	_	
4-67	736-738	no	_	
4-68	739-749	increments	_	
4-69	750-753	etc	_	
4-70	753-754	.	_	

#Text=Also it is very good for Binary Cache where there is no single table record, but multiple BCIs (binary cache indices), which are impossible to update all together.
5-1	755-759	Also	_	
5-2	760-762	it	_	
5-3	763-765	is	_	
5-4	766-770	very	_	
5-5	771-775	good	_	
5-6	776-779	for	_	
5-7	780-786	Binary	_	
5-8	787-792	Cache	_	
5-9	793-798	where	_	
5-10	799-804	there	_	
5-11	805-807	is	_	
5-12	808-810	no	_	
5-13	811-817	single	_	
5-14	818-823	table	_	
5-15	824-830	record	_	
5-16	830-831	,	_	
5-17	832-835	but	_	
5-18	836-844	multiple	_	
5-19	845-849	BCIs	_	
5-20	850-851	(	_	
5-21	851-857	binary	_	
5-22	858-863	cache	_	
5-23	864-871	indices	_	
5-24	871-872	)	_	
5-25	872-873	,	_	
5-26	874-879	which	_	
5-27	880-883	are	_	
5-28	884-894	impossible	_	
5-29	895-897	to	_	
5-30	898-904	update	_	
5-31	905-908	all	_	
5-32	909-917	together	_	
5-33	917-918	.	_	

#Text=The disadvantage is that it requires data copies to re-sort block records
#Text=[0189] The principles described above apply to a system with two or more layers of data storage, which can be non-volatile or mixed.
6-1	919-922	The	_	
6-2	923-935	disadvantage	_	
6-3	936-938	is	_	
6-4	939-943	that	_	
6-5	944-946	it	_	
6-6	947-955	requires	_	
6-7	956-960	data	_	
6-8	961-967	copies	_	
6-9	968-970	to	_	
6-10	971-978	re-sort	_	
6-11	979-984	block	_	
6-12	985-992	records	_	
6-13	993-994	[	_	
6-14	994-998	0189	_	
6-15	998-999	]	_	
6-16	1000-1003	The	_	
6-17	1004-1014	principles	_	
6-18	1015-1024	described	_	
6-19	1025-1030	above	_	
6-20	1031-1036	apply	_	
6-21	1037-1039	to	_	
6-22	1040-1041	a	_	
6-23	1042-1048	system	_	
6-24	1049-1053	with	_	
6-25	1054-1057	two	_	
6-26	1058-1060	or	_	
6-27	1061-1065	more	_	
6-28	1066-1072	layers	_	
6-29	1073-1075	of	_	
6-30	1076-1080	data	_	
6-31	1081-1088	storage	_	
6-32	1088-1089	,	_	
6-33	1090-1095	which	_	
6-34	1096-1099	can	_	
6-35	1100-1102	be	_	
6-36	1103-1115	non-volatile	_	
6-37	1116-1118	or	_	
6-38	1119-1124	mixed	_	
6-39	1124-1125	.	_	

#Text=The same rules can be applied to a specific type of storage in one of the layers, say Binary Cache sub-system or Update Blocks.
#Text=[0190] Advantage of this solution is that system performance impact is minimized and there is no increase in controller RAM space.
7-1	1126-1129	The	_	
7-2	1130-1134	same	_	
7-3	1135-1140	rules	_	
7-4	1141-1144	can	_	
7-5	1145-1147	be	_	
7-6	1148-1155	applied	_	
7-7	1156-1158	to	_	
7-8	1159-1160	a	_	
7-9	1161-1169	specific	_	
7-10	1170-1174	type	_	
7-11	1175-1177	of	_	
7-12	1178-1185	storage	_	
7-13	1186-1188	in	_	
7-14	1189-1192	one	_	
7-15	1193-1195	of	_	
7-16	1196-1199	the	_	
7-17	1200-1206	layers	_	
7-18	1206-1207	,	_	
7-19	1208-1211	say	_	
7-20	1212-1218	Binary	_	
7-21	1219-1224	Cache	_	
7-22	1225-1235	sub-system	_	
7-23	1236-1238	or	_	
7-24	1239-1245	Update	_	
7-25	1246-1252	Blocks	_	
7-26	1252-1253	.	_	
7-27	1254-1255	[	_	
7-28	1255-1259	0190	_	
7-29	1259-1260	]	_	
7-30	1261-1270	Advantage	_	
7-31	1271-1273	of	_	
7-32	1274-1278	this	*[1]	
7-33	1279-1287	solution	*[1]	
7-34	1288-1290	is	_	
7-35	1291-1295	that	_	
7-36	1296-1302	system	_	
7-37	1303-1314	performance	_	
7-38	1315-1321	impact	_	
7-39	1322-1324	is	_	
7-40	1325-1334	minimized	_	
7-41	1335-1338	and	_	
7-42	1339-1344	there	_	
7-43	1345-1347	is	_	
7-44	1348-1350	no	_	
7-45	1351-1359	increase	_	
7-46	1360-1362	in	_	
7-47	1363-1373	controller	_	
7-48	1374-1377	RAM	_	
7-49	1378-1383	space	_	
7-50	1383-1384	.	_	

#Text=Block Streams to Separate Hot/Cold Data by LGT
#Text=[0191] In another embodiment, units of data are sorted according to their temperatures into different block streams such that the blocks in each operating stream only involves data of similar temperature.
8-1	1385-1390	Block	_	
8-2	1391-1398	Streams	_	
8-3	1399-1401	to	_	
8-4	1402-1410	Separate	_	
8-5	1411-1414	Hot	_	
8-6	1414-1415	/	_	
8-7	1415-1419	Cold	_	
8-8	1420-1424	Data	_	
8-9	1425-1427	by	_	
8-10	1428-1431	LGT	_	
8-11	1432-1433	[	_	
8-12	1433-1437	0191	_	
8-13	1437-1438	]	_	
8-14	1439-1441	In	_	
8-15	1442-1449	another	_	
8-16	1450-1460	embodiment	_	
8-17	1460-1461	,	_	
8-18	1462-1467	units	_	
8-19	1468-1470	of	_	
8-20	1471-1475	data	_	
8-21	1476-1479	are	_	
8-22	1480-1486	sorted	_	
8-23	1487-1496	according	_	
8-24	1497-1499	to	_	
8-25	1500-1505	their	_	
8-26	1506-1518	temperatures	_	
8-27	1519-1523	into	_	
8-28	1524-1533	different	_	
8-29	1534-1539	block	_	
8-30	1540-1547	streams	_	
8-31	1548-1552	such	_	
8-32	1553-1557	that	_	
8-33	1558-1561	the	_	
8-34	1562-1568	blocks	_	
8-35	1569-1571	in	_	
8-36	1572-1576	each	_	
8-37	1577-1586	operating	_	
8-38	1587-1593	stream	_	
8-39	1594-1598	only	_	
8-40	1599-1607	involves	_	
8-41	1608-1612	data	_	
8-42	1613-1615	of	_	
8-43	1616-1623	similar	_	
8-44	1624-1635	temperature	_	
8-45	1635-1636	.	_	

#Text=The goal is to separate hot data from cold data as soon as possible and at every opportunity.
9-1	1637-1640	The	_	
9-2	1641-1645	goal	_	
9-3	1646-1648	is	_	
9-4	1649-1651	to	_	
9-5	1652-1660	separate	_	
9-6	1661-1664	hot	_	
9-7	1665-1669	data	_	
9-8	1670-1674	from	_	
9-9	1675-1679	cold	_	
9-10	1680-1684	data	_	
9-11	1685-1687	as	_	
9-12	1688-1692	soon	_	
9-13	1693-1695	as	_	
9-14	1696-1704	possible	_	
9-15	1705-1708	and	_	
9-16	1709-1711	at	_	
9-17	1712-1717	every	_	
9-18	1718-1729	opportunity	_	
9-19	1729-1730	.	_	

#Text=The hot data and cold data have different obsolescence and garbage collection/relocation schedules.
10-1	1731-1734	The	_	
10-2	1735-1738	hot	_	
10-3	1739-1743	data	_	
10-4	1744-1747	and	_	
10-5	1748-1752	cold	_	
10-6	1753-1757	data	_	
10-7	1758-1762	have	_	
10-8	1763-1772	different	_	
10-9	1773-1785	obsolescence	_	
10-10	1786-1789	and	_	
10-11	1790-1797	garbage	_	
10-12	1798-1808	collection	_	
10-13	1808-1809	/	_	
10-14	1809-1819	relocation	_	
10-15	1820-1829	schedules	_	
10-16	1829-1830	.	_	

#Text=For example, hot data will become obsolete faster and require more frequent garbage collection/rewrites.
11-1	1831-1834	For	_	
11-2	1835-1842	example	_	
11-3	1842-1843	,	_	
11-4	1844-1847	hot	_	
11-5	1848-1852	data	_	
11-6	1853-1857	will	_	
11-7	1858-1864	become	_	
11-8	1865-1873	obsolete	_	
11-9	1874-1880	faster	_	
11-10	1881-1884	and	_	
11-11	1885-1892	require	_	
11-12	1893-1897	more	_	
11-13	1898-1906	frequent	_	
11-14	1907-1914	garbage	_	
11-15	1915-1925	collection	_	
11-16	1925-1926	/	_	
11-17	1926-1934	rewrites	_	
11-18	1934-1935	.	_	

#Text=When the cold data are not mixed in with the hot data, it will not incur unnecessary rewrites.
12-1	1936-1940	When	_	
12-2	1941-1944	the	_	
12-3	1945-1949	cold	_	
12-4	1950-1954	data	_	
12-5	1955-1958	are	_	
12-6	1959-1962	not	_	
12-7	1963-1968	mixed	_	
12-8	1969-1971	in	_	
12-9	1972-1976	with	_	
12-10	1977-1980	the	_	
12-11	1981-1984	hot	_	
12-12	1985-1989	data	_	
12-13	1989-1990	,	_	
12-14	1991-1993	it	_	
12-15	1994-1998	will	_	
12-16	1999-2002	not	_	
12-17	2003-2008	incur	_	
12-18	2009-2020	unnecessary	_	
12-19	2021-2029	rewrites	_	
12-20	2029-2030	.	_	

#Text=Most likely, the hot data will obsolete itself without triggering relocation of cold data from one block to another block, and the cold data in cold blocks will stay there without compactions/relocations due to the hot data.
13-1	2031-2035	Most	_	
13-2	2036-2042	likely	_	
13-3	2042-2043	,	_	
13-4	2044-2047	the	_	
13-5	2048-2051	hot	_	
13-6	2052-2056	data	_	
13-7	2057-2061	will	_	
13-8	2062-2070	obsolete	_	
13-9	2071-2077	itself	_	
13-10	2078-2085	without	_	
13-11	2086-2096	triggering	_	
13-12	2097-2107	relocation	_	
13-13	2108-2110	of	_	
13-14	2111-2115	cold	_	
13-15	2116-2120	data	_	
13-16	2121-2125	from	_	
13-17	2126-2129	one	_	
13-18	2130-2135	block	_	
13-19	2136-2138	to	_	
13-20	2139-2146	another	_	
13-21	2147-2152	block	_	
13-22	2152-2153	,	_	
13-23	2154-2157	and	_	
13-24	2158-2161	the	_	
13-25	2162-2166	cold	_	
13-26	2167-2171	data	_	
13-27	2172-2174	in	_	
13-28	2175-2179	cold	_	
13-29	2180-2186	blocks	_	
13-30	2187-2191	will	_	
13-31	2192-2196	stay	_	
13-32	2197-2202	there	_	
13-33	2203-2210	without	_	
13-34	2211-2222	compactions	_	
13-35	2222-2223	/	_	
13-36	2223-2234	relocations	_	
13-37	2235-2238	due	_	
13-38	2239-2241	to	_	
13-39	2242-2245	the	_	
13-40	2246-2249	hot	_	
13-41	2250-2254	data	_	
13-42	2254-2255	.	_	
